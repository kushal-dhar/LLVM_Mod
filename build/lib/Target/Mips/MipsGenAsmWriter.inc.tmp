/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'm', 'f', 'h', 'c', '0', 9, 0,
  /* 22 */ 'm', 't', 'h', 'c', '0', 9, 0,
  /* 29 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 36 */ 'v', 'm', 'm', '0', 9, 0,
  /* 42 */ 'm', 't', 'm', '0', 9, 0,
  /* 48 */ 'm', 't', 'p', '0', 9, 0,
  /* 54 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 61 */ 'l', 'd', 'c', '1', 9, 0,
  /* 67 */ 's', 'd', 'c', '1', 9, 0,
  /* 73 */ 'c', 'f', 'c', '1', 9, 0,
  /* 79 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 86 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 93 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 100 */ 'c', 't', 'c', '1', 9, 0,
  /* 106 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 113 */ 'l', 'w', 'c', '1', 9, 0,
  /* 119 */ 's', 'w', 'c', '1', 9, 0,
  /* 125 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 132 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 139 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 146 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 153 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 160 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 167 */ 'm', 't', 'm', '1', 9, 0,
  /* 173 */ 'm', 't', 'p', '1', 9, 0,
  /* 179 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 186 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 195 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 204 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 212 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 222 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 230 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 238 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 245 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 252 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 261 */ 'l', 'd', 'c', '2', 9, 0,
  /* 267 */ 's', 'd', 'c', '2', 9, 0,
  /* 273 */ 'c', 'f', 'c', '2', 9, 0,
  /* 279 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 286 */ 'm', 'f', 'h', 'c', '2', 9, 0,
  /* 293 */ 'm', 't', 'h', 'c', '2', 9, 0,
  /* 300 */ 'c', 't', 'c', '2', 9, 0,
  /* 306 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 313 */ 'l', 'w', 'c', '2', 9, 0,
  /* 319 */ 's', 'w', 'c', '2', 9, 0,
  /* 325 */ 'm', 't', 'm', '2', 9, 0,
  /* 331 */ 'm', 't', 'p', '2', 9, 0,
  /* 337 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 346 */ 'l', 'd', 'c', '3', 9, 0,
  /* 352 */ 's', 'd', 'c', '3', 9, 0,
  /* 358 */ 'l', 'w', 'c', '3', 9, 0,
  /* 364 */ 's', 'w', 'c', '3', 9, 0,
  /* 370 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 379 */ 's', 'b', '1', '6', 9, 0,
  /* 385 */ 'b', 'c', '1', '6', 9, 0,
  /* 391 */ 'j', 'r', 'c', '1', '6', 9, 0,
  /* 398 */ 'b', 'n', 'e', 'z', 'c', '1', '6', 9, 0,
  /* 407 */ 'b', 'e', 'q', 'z', 'c', '1', '6', 9, 0,
  /* 416 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 423 */ 'm', 'o', 'v', 'e', '1', '6', 9, 0,
  /* 431 */ 's', 'h', '1', '6', 9, 0,
  /* 437 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 445 */ 'l', 'i', '1', '6', 9, 0,
  /* 451 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 460 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 467 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 474 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 481 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 488 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 497 */ 'j', 'r', '1', '6', 9, 0,
  /* 503 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 510 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 519 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 526 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 533 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 541 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 549 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 556 */ 'l', 'w', '1', '6', 9, 0,
  /* 562 */ 's', 'w', '1', '6', 9, 0,
  /* 568 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 576 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 584 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 600 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 617 */ 'd', 'l', 'a', 9, 0,
  /* 622 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 638 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 655 */ 'd', 's', 'r', 'a', 9, 0,
  /* 661 */ 'd', 'l', 's', 'a', 9, 0,
  /* 667 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 675 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 683 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 692 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 701 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 711 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 720 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 727 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 735 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 743 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 750 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 759 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 768 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 777 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 785 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 793 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 801 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 809 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 817 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 826 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 835 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 843 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 851 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 861 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 869 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 878 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 887 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 896 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 904 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 912 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 922 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 932 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 941 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 950 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 959 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 967 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 976 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 984 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 991 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 998 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 1007 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 1015 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 1022 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 1030 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 1038 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 1046 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 1055 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 1063 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 1073 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 1082 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1091 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1100 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1110 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1120 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1130 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1140 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1149 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1159 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1169 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1179 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1188 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1197 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1209 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1218 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1227 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1237 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1246 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1254 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1262 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1272 */ 's', 't', '.', 'b', 9, 0,
  /* 1278 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1288 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1297 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1306 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1315 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1325 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1335 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1345 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1355 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1364 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1374 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1384 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1394 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1406 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1415 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1424 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1433 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1442 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1452 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1461 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1470 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1479 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1488 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1496 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1502 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1509 */ 's', 'e', 'b', 9, 0,
  /* 1514 */ 'j', 'a', 'l', 'r', 'c', '.', 'h', 'b', 9, 0,
  /* 1524 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1531 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1540 */ 'l', 'b', 9, 0,
  /* 1544 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1553 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1567 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1580 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1592 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1602 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1612 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1621 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1630 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1639 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1648 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1662 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1675 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1687 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1698 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1710 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1722 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1734 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1745 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1756 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1767 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1781 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1794 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1806 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1815 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1824 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1834 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1844 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1854 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1864 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1876 */ 's', 'b', 9, 0,
  /* 1880 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1888 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1894 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 'c', 9, 0,
  /* 1905 */ 'b', 'c', 9, 0,
  /* 1909 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1915 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1921 */ 'j', 'i', 'c', 9, 0,
  /* 1926 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1932 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1939 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1948 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1957 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1966 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1975 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1984 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1993 */ 's', 'y', 'n', 'c', 9, 0,
  /* 1999 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 2005 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 2012 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 2020 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 2029 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 2036 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 2042 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 2048 */ 'j', 'r', 'c', 9, 0,
  /* 2053 */ 'j', 'a', 'l', 'r', 'c', 9, 0,
  /* 2060 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 2067 */ 'b', 'l', 't', 'c', 9, 0,
  /* 2073 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 2080 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 2087 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 2093 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 2099 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 2106 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 2113 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2120 */ 'b', 'c', '1', 'n', 'e', 'z', 'c', 9, 0,
  /* 2129 */ 'b', 'c', '2', 'n', 'e', 'z', 'c', 9, 0,
  /* 2138 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2145 */ 'b', 'c', '1', 'e', 'q', 'z', 'c', 9, 0,
  /* 2154 */ 'b', 'c', '2', 'e', 'q', 'z', 'c', 9, 0,
  /* 2163 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2170 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2177 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2184 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2193 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2202 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2211 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2221 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2231 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2241 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2249 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2256 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2264 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2272 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2281 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2290 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2298 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2306 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2314 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2323 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2332 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2339 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2348 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2357 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2366 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2374 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2384 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2392 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2402 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2411 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2422 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2430 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2439 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2450 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2459 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2471 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2480 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2488 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2496 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2505 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2514 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2523 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2530 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2540 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2548 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2559 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2567 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2576 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2585 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2593 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2601 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2609 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2617 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2625 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2633 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2642 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2650 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2658 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2668 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2676 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2685 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2694 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2703 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2713 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2723 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2732 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2741 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2750 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2761 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2772 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2782 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2793 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2802 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2809 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2818 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2826 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2833 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2843 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2851 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2858 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2867 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2875 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2883 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2891 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2899 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2909 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2917 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2928 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2936 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2944 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2952 */ 'r', 'e', 'c', 'i', 'p', '.', 'd', 9, 0,
  /* 2961 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2969 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2979 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2987 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 2996 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3007 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3015 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3024 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3035 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3044 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3056 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3065 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 3073 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 3081 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 3089 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 3097 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 3105 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 3115 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 3123 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 3132 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 3140 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 3149 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3159 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3169 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3180 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3192 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3202 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3213 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3222 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3231 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3240 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3250 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3260 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3270 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3280 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3289 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3299 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3309 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3319 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3329 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3338 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3347 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3358 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3369 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3381 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3390 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3399 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3409 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3416 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3426 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3435 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3443 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3452 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3460 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3470 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3478 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3487 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3498 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3506 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3515 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3526 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3535 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3547 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3556 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3564 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3573 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3583 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3592 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3602 */ 's', 't', '.', 'd', 9, 0,
  /* 3608 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3616 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3626 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3636 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3647 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3659 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3669 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3680 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3689 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3698 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3707 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3717 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3727 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3737 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3747 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3756 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3766 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3776 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3786 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3796 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3808 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3817 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3826 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3837 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3848 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3857 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3866 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3875 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3884 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3893 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3902 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3910 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3918 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3925 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3936 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3947 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3957 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3968 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3977 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3985 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3991 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 4001 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 4008 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 4018 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 4026 */ 's', 'c', 'd', 9, 0,
  /* 4031 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 4037 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 4043 */ 'd', 's', 'h', 'd', 9, 0,
  /* 4049 */ 'l', 'l', 'd', 9, 0,
  /* 4054 */ 'a', 'n', 'd', 9, 0,
  /* 4059 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 4068 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 4076 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 4082 */ 's', 'd', 9, 0,
  /* 4086 */ 'l', 'b', 'e', 9, 0,
  /* 4091 */ 's', 'b', 'e', 9, 0,
  /* 4096 */ 's', 'c', 'e', 9, 0,
  /* 4101 */ 'c', 'a', 'c', 'h', 'e', 'e', 9, 0,
  /* 4109 */ 'p', 'r', 'e', 'f', 'e', 9, 0,
  /* 4116 */ 'b', 'g', 'e', 9, 0,
  /* 4121 */ 't', 'g', 'e', 9, 0,
  /* 4126 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 4133 */ 'l', 'h', 'e', 9, 0,
  /* 4138 */ 's', 'h', 'e', 9, 0,
  /* 4143 */ 'b', 'l', 'e', 9, 0,
  /* 4148 */ 'l', 'l', 'e', 9, 0,
  /* 4153 */ 'l', 'w', 'l', 'e', 9, 0,
  /* 4159 */ 's', 'w', 'l', 'e', 9, 0,
  /* 4165 */ 'b', 'n', 'e', 9, 0,
  /* 4170 */ 's', 'n', 'e', 9, 0,
  /* 4175 */ 't', 'n', 'e', 9, 0,
  /* 4180 */ 'l', 'w', 'r', 'e', 9, 0,
  /* 4186 */ 's', 'w', 'r', 'e', 9, 0,
  /* 4192 */ 'l', 'b', 'u', 'e', 9, 0,
  /* 4198 */ 'l', 'h', 'u', 'e', 9, 0,
  /* 4204 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 4210 */ 'l', 'w', 'e', 9, 0,
  /* 4215 */ 's', 'w', 'e', 9, 0,
  /* 4220 */ 'b', 'c', '1', 'f', 9, 0,
  /* 4226 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 4232 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 4238 */ 'n', 'e', 'g', 9, 0,
  /* 4243 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4252 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4261 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4271 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4280 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4287 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4295 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4303 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4310 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4319 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4328 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4337 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4345 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4353 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4361 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4369 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4378 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4386 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4394 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4404 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4412 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4421 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4430 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4439 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4449 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4459 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4468 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4477 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4486 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4494 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4501 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4508 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4517 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4525 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4534 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4544 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4554 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4563 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4574 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4585 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4595 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4602 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4609 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4617 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4625 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4633 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4642 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4650 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4660 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4670 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4681 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4691 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4702 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4711 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4720 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4729 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4739 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4749 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4759 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4769 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4778 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4788 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4798 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4808 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4818 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4828 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4837 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4846 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4858 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4867 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4878 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4887 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4897 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4906 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4914 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4922 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4932 */ 's', 't', '.', 'h', 9, 0,
  /* 4938 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4948 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4958 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4969 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4979 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4990 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 4999 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5008 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5017 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5027 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5037 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5047 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5057 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 5066 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 5076 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 5086 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5096 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5106 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5118 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5127 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5136 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 5145 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 5154 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 5164 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 5173 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 5182 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 5191 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 5200 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 5208 */ 'b', 'z', '.', 'h', 9, 0,
  /* 5214 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 5221 */ 'd', 's', 'b', 'h', 9, 0,
  /* 5227 */ 'w', 's', 'b', 'h', 9, 0,
  /* 5233 */ 's', 'e', 'h', 9, 0,
  /* 5238 */ 'u', 'l', 'h', 9, 0,
  /* 5243 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5252 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5266 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5279 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5296 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5307 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5317 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5327 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5336 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5345 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5354 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5363 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5374 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5382 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5391 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5400 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5411 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5422 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5434 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5446 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5458 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5469 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5479 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5490 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5501 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5512 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5523 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5534 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5545 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5557 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5569 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5580 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5589 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5598 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5608 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5618 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5628 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5638 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5648 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5663 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5678 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5690 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5703 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5718 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5731 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5745 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5759 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5769 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5780 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5791 */ 'u', 's', 'h', 9, 0,
  /* 5796 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5802 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5809 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5816 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5822 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5828 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5834 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5840 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5846 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5852 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5858 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5872 */ 'd', 'l', 'i', 9, 0,
  /* 5877 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5883 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5889 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5895 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5901 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5907 */ 's', 'l', 't', 'i', 9, 0,
  /* 5913 */ 't', 'l', 't', 'i', 9, 0,
  /* 5919 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5925 */ 'l', 'u', 'i', 9, 0,
  /* 5930 */ 'j', 9, 0,
  /* 5933 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5940 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5949 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5958 */ 'b', 'a', 'l', 9, 0,
  /* 5963 */ 'j', 'a', 'l', 9, 0,
  /* 5968 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 5976 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 5984 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 5996 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6008 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6024 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6039 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6055 */ 'l', 'd', 'l', 9, 0,
  /* 6060 */ 's', 'd', 'l', 9, 0,
  /* 6065 */ 'b', 'g', 'e', 'l', 9, 0,
  /* 6071 */ 'b', 'l', 'e', 'l', 9, 0,
  /* 6077 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 6083 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 6090 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6104 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6118 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6131 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6146 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 6155 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 6164 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 6173 */ 'd', 's', 'l', 'l', 9, 0,
  /* 6179 */ 'd', 'r', 'o', 'l', 9, 0,
  /* 6185 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 6191 */ 'd', 's', 'r', 'l', 9, 0,
  /* 6197 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 6204 */ 'b', 'g', 't', 'l', 9, 0,
  /* 6210 */ 'b', 'l', 't', 'l', 9, 0,
  /* 6216 */ 'b', 'g', 'e', 'u', 'l', 9, 0,
  /* 6223 */ 'b', 'l', 'e', 'u', 'l', 9, 0,
  /* 6230 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 6236 */ 'b', 'g', 't', 'u', 'l', 9, 0,
  /* 6243 */ 'b', 'l', 't', 'u', 'l', 9, 0,
  /* 6250 */ 'l', 'w', 'l', 9, 0,
  /* 6255 */ 's', 'w', 'l', 9, 0,
  /* 6260 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 6267 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 6274 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 6281 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 6288 */ 'd', 'e', 'x', 't', 'm', 9, 0,
  /* 6295 */ 'l', 'w', 'm', 9, 0,
  /* 6300 */ 's', 'w', 'm', 9, 0,
  /* 6305 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6313 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6321 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6327 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6333 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6339 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6346 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6352 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6362 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6369 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6377 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6384 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6392 */ 'c', 'm', 'p', 9, 0,
  /* 6397 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6403 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6414 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6430 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6447 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6454 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6461 */ 'j', 'r', 'c', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6473 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6484 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6490 */ 'd', 'v', 'p', 9, 0,
  /* 6495 */ 'e', 'v', 'p', 9, 0,
  /* 6500 */ 'l', 'w', 'p', 9, 0,
  /* 6505 */ 's', 'w', 'p', 9, 0,
  /* 6510 */ 'b', 'e', 'q', 9, 0,
  /* 6515 */ 's', 'e', 'q', 9, 0,
  /* 6520 */ 't', 'e', 'q', 9, 0,
  /* 6525 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6537 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6549 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6565 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6580 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6596 */ 'l', 'd', 'r', 9, 0,
  /* 6601 */ 's', 'd', 'r', 9, 0,
  /* 6606 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6620 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6634 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6647 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6662 */ 'j', 'r', 9, 0,
  /* 6666 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6672 */ 'n', 'o', 'r', 9, 0,
  /* 6677 */ 'd', 'r', 'o', 'r', 9, 0,
  /* 6683 */ 'x', 'o', 'r', 9, 0,
  /* 6688 */ 'r', 'd', 'p', 'g', 'p', 'r', 9, 0,
  /* 6696 */ 'w', 'r', 'p', 'g', 'p', 'r', 9, 0,
  /* 6704 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6711 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6718 */ 'l', 'w', 'r', 9, 0,
  /* 6723 */ 's', 'w', 'r', 9, 0,
  /* 6728 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6736 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6744 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6753 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6762 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6771 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6780 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6788 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6798 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6808 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6817 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6828 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6837 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6848 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6860 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6867 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6877 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6888 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6897 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6906 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6914 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6922 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6929 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 6940 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 6951 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 6961 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 6972 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 6981 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 6988 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 6997 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 7004 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 7011 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7019 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7029 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 7040 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 7048 */ 'r', 'e', 'c', 'i', 'p', '.', 's', 9, 0,
  /* 7057 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7065 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7075 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7084 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7095 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7104 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7115 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7127 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 7134 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 7143 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 7152 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 7160 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 7170 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 7179 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 7190 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7199 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7210 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7222 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 7230 */ 'r', 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 7239 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 7247 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 7254 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7261 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 7272 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 7283 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 7293 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 7304 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 7313 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 7320 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 7330 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 7340 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 7348 */ 'a', 'b', 's', 9, 0,
  /* 7353 */ 'j', 'a', 'l', 's', 9, 0,
  /* 7359 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 7368 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7377 */ 'i', 'n', 's', 9, 0,
  /* 7382 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7389 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7395 */ 'b', 'c', '1', 't', 9, 0,
  /* 7401 */ 'b', 'g', 't', 9, 0,
  /* 7406 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7412 */ 'b', 'l', 't', 9, 0,
  /* 7417 */ 's', 'l', 't', 9, 0,
  /* 7422 */ 't', 'l', 't', 9, 0,
  /* 7427 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7434 */ 'n', 'o', 't', 9, 0,
  /* 7439 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7445 */ 'd', 'e', 'x', 't', 9, 0,
  /* 7451 */ 'l', 'b', 'u', 9, 0,
  /* 7456 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7463 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7470 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7477 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7484 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7491 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7498 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7504 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7510 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7516 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7522 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7529 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7537 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7544 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7551 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7558 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7566 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7573 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7580 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7586 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7592 */ 's', 'l', 't', 'u', 9, 0,
  /* 7598 */ 't', 'l', 't', 'u', 9, 0,
  /* 7604 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7612 */ 'd', 'e', 'x', 't', 'u', 9, 0,
  /* 7619 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7626 */ 'l', 'w', 'u', 9, 0,
  /* 7631 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7638 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7646 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7654 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7661 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7668 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7674 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7681 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7688 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7696 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7703 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7711 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7717 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7724 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7731 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7739 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7748 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7755 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7763 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7769 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7778 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7787 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7796 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7806 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7816 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7826 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7833 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7841 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7850 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7858 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7866 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7875 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7883 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7892 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 7899 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 7908 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 7917 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 7925 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 7933 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7942 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 7951 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 7959 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 7967 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7976 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 7985 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 7994 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 8002 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 8010 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 8018 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 8026 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8042 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8055 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8073 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8089 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 8098 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 8107 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 8115 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 8123 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 8132 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 8140 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 8148 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 8158 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 8166 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 8175 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8184 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8193 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 8203 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 8213 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 8222 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 8231 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 8240 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8253 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8266 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 8274 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 8281 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 8291 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 8299 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 8306 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 8315 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 8323 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 8331 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 8339 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 8347 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 8355 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 8364 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 8372 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 8382 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8392 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8401 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8412 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8423 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8433 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8441 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8449 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8458 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8467 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8474 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8484 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8495 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8506 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8516 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8527 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8538 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8546 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8554 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8562 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8570 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8578 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8588 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8596 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8605 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8613 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8621 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8630 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8640 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8650 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8661 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8673 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8683 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8694 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8703 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8712 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8721 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8731 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8741 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8751 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8761 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8771 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8780 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8790 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8800 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8810 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8820 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8830 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8840 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8850 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8860 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8869 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8878 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8889 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8900 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 8912 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8921 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 8932 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 8941 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 8951 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8962 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8973 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 8985 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 8995 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 9004 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 9012 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 9020 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 9028 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9037 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9046 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 9054 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 9063 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 9073 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9082 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9092 */ 's', 't', '.', 'w', 9, 0,
  /* 9098 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9108 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9118 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9129 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 9141 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9151 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9162 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9171 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9180 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9189 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9199 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9209 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9219 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9229 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 9238 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 9248 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 9258 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9268 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9278 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9290 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9299 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9308 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9319 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9330 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 9339 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 9348 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 9358 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 9367 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 9376 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 9385 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9394 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9402 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9410 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9419 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9427 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9433 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9440 */ 'u', 'l', 'w', 9, 0,
  /* 9445 */ 'u', 's', 'w', 9, 0,
  /* 9450 */ 'p', 'r', 'e', 'f', 'x', 9, 0,
  /* 9457 */ 'l', 'h', 'x', 9, 0,
  /* 9462 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9468 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9474 */ 'l', 'w', 'x', 9, 0,
  /* 9479 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9485 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9491 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9497 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9505 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9512 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9518 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9524 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9532 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9539 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9545 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9551 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9557 */ 's', 'e', 'b', 9, 32, 0,
  /* 9563 */ 'j', 'r', 'c', 9, 32, 0,
  /* 9569 */ 's', 'e', 'h', 9, 32, 0,
  /* 9575 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9589 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9602 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9614 */ 'c', 'i', 'n', 's', '3', '2', 32, 0,
  /* 9622 */ 'e', 'x', 't', 's', '3', '2', 32, 0,
  /* 9630 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9636 */ 'l', 'd', 32, 0,
  /* 9640 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9648 */ 's', 'd', 32, 0,
  /* 9652 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 9659 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 9666 */ 's', 'e', 'q', 32, 0,
  /* 9671 */ 'c', 'i', 'n', 's', 32, 0,
  /* 9677 */ 'd', 'i', 'n', 's', 32, 0,
  /* 9683 */ 'e', 'x', 't', 's', 32, 0,
  /* 9689 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9695 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 9702 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 9709 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9717 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9725 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9733 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9741 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 9772 */ 'c', '.', 0,
  /* 9775 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 9798 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 9821 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 9843 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 9851 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 9864 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 9871 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 9881 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 9896 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 9905 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 9913 */ 'e', 'h', 'b', 0,
  /* 9917 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 9924 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 9930 */ 't', 'l', 'b', 'i', 'n', 'v', 'f', 0,
  /* 9938 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 9944 */ 'f', 'o', 'o', 0,
  /* 9948 */ 't', 'l', 'b', 'p', 0,
  /* 9953 */ 's', 's', 'n', 'o', 'p', 0,
  /* 9959 */ 't', 'l', 'b', 'r', 0,
  /* 9964 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 9970 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 9976 */ 'w', 'a', 'i', 't', 0,
  /* 9981 */ 't', 'l', 'b', 'i', 'n', 'v', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    9872U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    9865U,	// BUNDLE
    9882U,	// LIFETIME_START
    9852U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    9776U,	// PATCHABLE_FUNCTION_ENTER
    9742U,	// PATCHABLE_RET
    9822U,	// PATCHABLE_FUNCTION_EXIT
    9799U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_BR
    23733U,	// ABSMacro
    21897U,	// ABSQ_S_PH
    21897U,	// ABSQ_S_PH_MM
    18119U,	// ABSQ_S_QB
    18119U,	// ABSQ_S_QB_MMR2
    25205U,	// ABSQ_S_W
    25205U,	// ABSQ_S_W_MM
    19794U,	// ABS_D_MMR6
    23512U,	// ABS_S_MMR6
    268455873U,	// ADD
    18405U,	// ADDIUPC
    18405U,	// ADDIUPC_MM
    18405U,	// ADDIUPC_MMR6
    22788U,	// ADDIUR1SP_MM
    268452178U,	// ADDIUR2_MM
    8683891U,	// ADDIUS5_MM
    547137U,	// ADDIUSP_MM
    268459371U,	// ADDIU_MMR6
    268457158U,	// ADDQH_PH
    268457158U,	// ADDQH_PH_MMR2
    268457275U,	// ADDQH_R_PH
    268457275U,	// ADDQH_R_PH_MMR2
    268460336U,	// ADDQH_R_W
    268460336U,	// ADDQH_R_W_MMR2
    268459939U,	// ADDQH_W
    268459939U,	// ADDQH_W_MMR2
    268457232U,	// ADDQ_PH
    268457232U,	// ADDQ_PH_MM
    268457331U,	// ADDQ_S_PH
    268457331U,	// ADDQ_S_PH_MM
    268460641U,	// ADDQ_S_W
    268460641U,	// ADDQ_S_W_MM
    268453901U,	// ADDSC
    268453901U,	// ADDSC_MM
    268452542U,	// ADDS_A_B
    268454062U,	// ADDS_A_D
    268456102U,	// ADDS_A_H
    268459647U,	// ADDS_A_W
    268453010U,	// ADDS_S_B
    268455160U,	// ADDS_S_D
    268456659U,	// ADDS_S_H
    268460691U,	// ADDS_S_W
    268453225U,	// ADDS_U_B
    268455627U,	// ADDS_U_D
    268456937U,	// ADDS_U_H
    268461109U,	// ADDS_U_W
    268452382U,	// ADDU16_MM
    268452382U,	// ADDU16_MMR6
    268453443U,	// ADDUH_QB
    268453443U,	// ADDUH_QB_MMR2
    268453551U,	// ADDUH_R_QB
    268453551U,	// ADDUH_R_QB_MMR2
    268459312U,	// ADDU_MMR6
    268457430U,	// ADDU_PH
    268457430U,	// ADDU_PH_MMR2
    268453656U,	// ADDU_QB
    268453656U,	// ADDU_QB_MM
    268457375U,	// ADDU_S_PH
    268457375U,	// ADDU_S_PH_MMR2
    268453597U,	// ADDU_S_QB
    268453597U,	// ADDU_S_QB_MM
    268452791U,	// ADDVI_B
    268454582U,	// ADDVI_D
    268456318U,	// ADDVI_H
    268460072U,	// ADDVI_W
    268453303U,	// ADDV_B
    268455717U,	// ADDV_D
    268457015U,	// ADDV_H
    268461209U,	// ADDV_W
    268453940U,	// ADDWC
    268453940U,	// ADDWC_MM
    268452524U,	// ADD_A_B
    268454043U,	// ADD_A_D
    268456084U,	// ADD_A_H
    268459628U,	// ADD_A_W
    268455873U,	// ADD_MM
    268455873U,	// ADD_MMR6
    268457651U,	// ADDi
    268457651U,	// ADDi_MM
    268459371U,	// ADDiu
    268459371U,	// ADDiu_MM
    268459312U,	// ADDu
    268459312U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    268458147U,	// ALIGN
    268458147U,	// ALIGN_MMR6
    18397U,	// ALUIPC
    18397U,	// ALUIPC_MMR6
    268455895U,	// AND
    9224609U,	// AND16_MM
    9224609U,	// AND16_MMR6
    268455895U,	// AND64
    268452278U,	// ANDI16_MM
    268452278U,	// ANDI16_MMR6
    268452650U,	// ANDI_B
    268457657U,	// ANDI_MMR6
    268455895U,	// AND_MM
    268455895U,	// AND_MMR6
    268459472U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    268457657U,	// ANDi
    268457657U,	// ANDi64
    268457657U,	// ANDi_MM
    268455909U,	// APPEND
    268455909U,	// APPEND_MMR2
    268452904U,	// ASUB_S_B
    268454990U,	// ASUB_S_D
    268456491U,	// ASUB_S_H
    268460471U,	// ASUB_S_W
    268453119U,	// ASUB_U_B
    268455457U,	// ASUB_U_D
    268456779U,	// ASUB_U_H
    268460939U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    268457761U,	// AUI
    18390U,	// AUIPC
    18390U,	// AUIPC_MMR6
    268457761U,	// AUI_MMR6
    268452990U,	// AVER_S_B
    268455140U,	// AVER_S_D
    268456629U,	// AVER_S_H
    268460671U,	// AVER_S_W
    268453205U,	// AVER_U_B
    268455607U,	// AVER_U_D
    268456917U,	// AVER_U_H
    268461089U,	// AVER_U_W
    268452932U,	// AVE_S_B
    268455072U,	// AVE_S_D
    268456561U,	// AVE_S_H
    268460553U,	// AVE_S_W
    268453147U,	// AVE_U_B
    268455539U,	// AVE_U_D
    268456849U,	// AVE_U_H
    268461021U,	// AVE_U_W
    23915U,	// AddiuRxImmX16
    1072491U,	// AddiuRxPcImmX16
    553672043U,	// AddiuRxRxImm16
    16801131U,	// AddiuRxRxImmX16
    25189739U,	// AddiuRxRyOffMemX16
    1336707U,	// AddiuSpImm16
    550275U,	// AddiuSpImmX16
    268459312U,	// AdduRxRyRz16
    16797655U,	// AndRxRxRy16
    0U,	// B
    541053U,	// B16_MM
    268459311U,	// BADDu
    546631U,	// BAL
    542599U,	// BALC
    542599U,	// BALC_MMR6
    268458146U,	// BALIGN
    268458146U,	// BALIGN_MMR2
    0U,	// BAL_BR
    33570871U,	// BBIT0
    33571003U,	// BBIT032
    33570996U,	// BBIT1
    33571012U,	// BBIT132
    542578U,	// BC
    541058U,	// BC16_MMR6
    26110U,	// BC1EQZ
    18530U,	// BC1EQZC_MMR6
    20605U,	// BC1F
    22468U,	// BC1FL
    20605U,	// BC1F_MM
    26094U,	// BC1NEZ
    18505U,	// BC1NEZC_MMR6
    23780U,	// BC1T
    22582U,	// BC1TL
    23780U,	// BC1T_MM
    26118U,	// BC2EQZ
    18539U,	// BC2EQZC_MMR6
    26102U,	// BC2NEZ
    18514U,	// BC2NEZC_MMR6
    268452719U,	// BCLRI_B
    268454526U,	// BCLRI_D
    268456262U,	// BCLRI_H
    268460016U,	// BCLRI_W
    268452871U,	// BCLR_B
    268454914U,	// BCLR_D
    268456458U,	// BCLR_H
    268460387U,	// BCLR_W
    542578U,	// BC_MMR6
    268458351U,	// BEQ
    268458351U,	// BEQ64
    268453883U,	// BEQC
    268453883U,	// BEQC64
    268453883U,	// BEQC_MMR6
    268458026U,	// BEQL
    16961U,	// BEQZ16_MM
    18351U,	// BEQZALC
    18351U,	// BEQZALC_MMR6
    18548U,	// BEQZC
    16792U,	// BEQZC16_MMR6
    18548U,	// BEQZC64
    18548U,	// BEQZC_MM
    18548U,	// BEQZC_MMR6
    268458351U,	// BEQ_MM
    268455957U,	// BGE
    268453750U,	// BGEC
    268453750U,	// BGEC64
    268453750U,	// BGEC_MMR6
    268455957U,	// BGEImmMacro
    268457906U,	// BGEL
    268457906U,	// BGELImmMacro
    268459339U,	// BGEU
    268453914U,	// BGEUC
    268453914U,	// BGEUC64
    268453914U,	// BGEUC_MMR6
    268459339U,	// BGEUImmMacro
    268458057U,	// BGEUL
    268458057U,	// BGEULImmMacro
    25864U,	// BGEZ
    25864U,	// BGEZ64
    22353U,	// BGEZAL
    18324U,	// BGEZALC
    18324U,	// BGEZALC_MMR6
    22540U,	// BGEZALL
    23744U,	// BGEZALS_MM
    22353U,	// BGEZAL_MM
    18491U,	// BGEZC
    18491U,	// BGEZC64
    18491U,	// BGEZC_MMR6
    22645U,	// BGEZL
    25864U,	// BGEZ_MM
    268459242U,	// BGT
    268459242U,	// BGTImmMacro
    268458045U,	// BGTL
    268458045U,	// BGTLImmMacro
    268459421U,	// BGTU
    268459421U,	// BGTUImmMacro
    268458077U,	// BGTUL
    268458077U,	// BGTULImmMacro
    25924U,	// BGTZ
    25924U,	// BGTZ64
    18360U,	// BGTZALC
    18360U,	// BGTZALC_MMR6
    18555U,	// BGTZC
    18555U,	// BGTZC64
    18555U,	// BGTZC_MMR6
    22659U,	// BGTZL
    25924U,	// BGTZ_MM
    285229908U,	// BINSLI_B
    285231715U,	// BINSLI_D
    285233451U,	// BINSLI_H
    285237205U,	// BINSLI_W
    285230055U,	// BINSL_B
    285231915U,	// BINSL_D
    285233565U,	// BINSL_H
    285237363U,	// BINSL_W
    285229969U,	// BINSRI_B
    285231760U,	// BINSRI_D
    285233496U,	// BINSRI_H
    285237250U,	// BINSRI_W
    285230103U,	// BINSR_B
    285232180U,	// BINSR_D
    285233690U,	// BINSR_H
    285237653U,	// BINSR_W
    24088U,	// BITREV
    24088U,	// BITREV_MM
    22738U,	// BITSWAP
    22738U,	// BITSWAP_MMR6
    268455984U,	// BLE
    268455984U,	// BLEImmMacro
    268457912U,	// BLEL
    268457912U,	// BLELImmMacro
    268459351U,	// BLEU
    268459351U,	// BLEUImmMacro
    268458064U,	// BLEUL
    268458064U,	// BLEULImmMacro
    25870U,	// BLEZ
    25870U,	// BLEZ64
    18333U,	// BLEZALC
    18333U,	// BLEZALC_MMR6
    18498U,	// BLEZC
    18498U,	// BLEZC64
    18498U,	// BLEZC_MMR6
    22652U,	// BLEZL
    25870U,	// BLEZ_MM
    268459253U,	// BLT
    268453908U,	// BLTC
    268453908U,	// BLTC64
    268453908U,	// BLTC_MMR6
    268459253U,	// BLTImmMacro
    268458051U,	// BLTL
    268458051U,	// BLTLImmMacro
    268459427U,	// BLTU
    268453921U,	// BLTUC
    268453921U,	// BLTUC64
    268453921U,	// BLTUC_MMR6
    268459427U,	// BLTUImmMacro
    268458084U,	// BLTUL
    268458084U,	// BLTULImmMacro
    25930U,	// BLTZ
    25930U,	// BLTZ64
    22361U,	// BLTZAL
    18369U,	// BLTZALC
    18369U,	// BLTZALC_MMR6
    22549U,	// BLTZALL
    23753U,	// BLTZALS_MM
    22361U,	// BLTZAL_MM
    18562U,	// BLTZC
    18562U,	// BLTZC64
    18562U,	// BLTZC_MMR6
    22666U,	// BLTZL
    25930U,	// BLTZ_MM
    285230024U,	// BMNZI_B
    285236745U,	// BMNZ_V
    285230016U,	// BMZI_B
    285236731U,	// BMZ_V
    268456006U,	// BNE
    268456006U,	// BNE64
    268453756U,	// BNEC
    268453756U,	// BNEC64
    268453756U,	// BNEC_MMR6
    268452658U,	// BNEGI_B
    268454474U,	// BNEGI_D
    268456210U,	// BNEGI_H
    268459964U,	// BNEGI_W
    268452626U,	// BNEG_B
    268454450U,	// BNEG_D
    268456186U,	// BNEG_H
    268459859U,	// BNEG_W
    268457918U,	// BNEL
    16953U,	// BNEZ16_MM
    18342U,	// BNEZALC
    18342U,	// BNEZALC_MMR6
    18523U,	// BNEZC
    16783U,	// BNEZC16_MMR6
    18523U,	// BNEZC64
    18523U,	// BNEZC_MM
    18523U,	// BNEZC_MMR6
    268456006U,	// BNE_MM
    268453928U,	// BNVC
    268453928U,	// BNVC_MMR6
    17887U,	// BNZ_B
    20386U,	// BNZ_D
    21599U,	// BNZ_H
    24066U,	// BNZ_V
    25818U,	// BNZ_W
    268453934U,	// BOVC
    268453934U,	// BOVC_MMR6
    540885U,	// BPOSGE32
    542567U,	// BPOSGE32C_MMR3
    540885U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    42014510U,	// BREAK
    82372U,	// BREAK16_MM
    82372U,	// BREAK16_MMR6
    42014510U,	// BREAK_MM
    42014510U,	// BREAK_MMR6
    285229883U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    285236703U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    268452773U,	// BSETI_B
    268454564U,	// BSETI_D
    268456300U,	// BSETI_H
    268460054U,	// BSETI_W
    268453087U,	// BSET_B
    268455276U,	// BSET_D
    268456747U,	// BSET_H
    268460845U,	// BSET_W
    17881U,	// BZ_B
    20370U,	// BZ_D
    21593U,	// BZ_H
    24053U,	// BZ_V
    25812U,	// BZ_W
    541362U,	// B_MMR6_Pseudo
    541362U,	// B_MM_Pseudo
    268458351U,	// BeqImm
    805332271U,	// BeqzRxImm16
    25903U,	// BeqzRxImmX16
    1327794U,	// Bimm16
    541362U,	// BimmX16
    268456006U,	// BneImm
    805332244U,	// BnezRxImm16
    25876U,	// BnezRxImmX16
    9844U,	// Break16
    1598781U,	// Bteqz16
    1073764601U,	// BteqzT8CmpX16
    1073764086U,	// BteqzT8CmpiX16
    1073765626U,	// BteqzT8SltX16
    1073764116U,	// BteqzT8SltiX16
    1073765753U,	// BteqzT8SltiuX16
    1073765801U,	// BteqzT8SltuX16
    550205U,	// BteqzX16
    1598754U,	// Btnez16
    1342200057U,	// BtnezT8CmpX16
    1342199542U,	// BtnezT8CmpiX16
    1342201082U,	// BtnezT8SltX16
    1342199572U,	// BtnezT8SltiX16
    1342201209U,	// BtnezT8SltiuX16
    1342201257U,	// BtnezT8SltuX16
    550178U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    1937439U,	// CACHE
    1937414U,	// CACHEE
    1937414U,	// CACHEE_MM
    1937414U,	// CACHEE_MMR6
    1937439U,	// CACHE_MM
    1937439U,	// CACHE_MMR6
    1937439U,	// CACHE_R6
    19157U,	// CEIL_L_D64
    19157U,	// CEIL_L_D_MMR6
    23336U,	// CEIL_L_S
    23336U,	// CEIL_L_S_MMR6
    20332U,	// CEIL_W_D32
    20332U,	// CEIL_W_D64
    20332U,	// CEIL_W_D_MMR6
    20332U,	// CEIL_W_MM
    23668U,	// CEIL_W_S
    23668U,	// CEIL_W_S_MM
    23668U,	// CEIL_W_S_MMR6
    268452702U,	// CEQI_B
    268454509U,	// CEQI_D
    268456245U,	// CEQI_H
    268459999U,	// CEQI_W
    268452856U,	// CEQ_B
    268454821U,	// CEQ_D
    268456436U,	// CEQ_H
    268460275U,	// CEQ_W
    16458U,	// CFC1
    16458U,	// CFC1_MM
    16658U,	// CFC2_MM
    17052U,	// CFCMSA
    268461512U,	// CINS
    268461455U,	// CINS32
    19802U,	// CLASS_D
    19802U,	// CLASS_D_MMR6
    23519U,	// CLASS_S
    23519U,	// CLASS_S_MMR6
    268452941U,	// CLEI_S_B
    268455081U,	// CLEI_S_D
    268456570U,	// CLEI_S_H
    268460562U,	// CLEI_S_W
    268453156U,	// CLEI_U_B
    268455548U,	// CLEI_U_D
    268456858U,	// CLEI_U_H
    268461030U,	// CLEI_U_W
    268452923U,	// CLE_S_B
    268455063U,	// CLE_S_D
    268456552U,	// CLE_S_H
    268460544U,	// CLE_S_W
    268453138U,	// CLE_U_B
    268455530U,	// CLE_U_D
    268456840U,	// CLE_U_H
    268461012U,	// CLE_U_W
    22713U,	// CLO
    22713U,	// CLO_MM
    22713U,	// CLO_MMR6
    22713U,	// CLO_R6
    268452961U,	// CLTI_S_B
    268455101U,	// CLTI_S_D
    268456590U,	// CLTI_S_H
    268460582U,	// CLTI_S_W
    268453176U,	// CLTI_U_B
    268455568U,	// CLTI_U_D
    268456878U,	// CLTI_U_H
    268461050U,	// CLTI_U_W
    268453029U,	// CLT_S_B
    268455179U,	// CLT_S_D
    268456678U,	// CLT_S_H
    268460710U,	// CLT_S_W
    268453256U,	// CLT_U_B
    268455658U,	// CLT_U_D
    268456968U,	// CLT_U_H
    268461140U,	// CLT_U_W
    25898U,	// CLZ
    25898U,	// CLZ_MM
    25898U,	// CLZ_MMR6
    25898U,	// CLZ_R6
    268453489U,	// CMPGDU_EQ_QB
    268453489U,	// CMPGDU_EQ_QB_MMR2
    268453394U,	// CMPGDU_LE_QB
    268453394U,	// CMPGDU_LE_QB_MMR2
    268453608U,	// CMPGDU_LT_QB
    268453608U,	// CMPGDU_LT_QB_MMR2
    268453503U,	// CMPGU_EQ_QB
    268453503U,	// CMPGU_EQ_QB_MM
    268453408U,	// CMPGU_LE_QB
    268453408U,	// CMPGU_LE_QB_MM
    268453622U,	// CMPGU_LT_QB
    268453622U,	// CMPGU_LT_QB_MM
    18060U,	// CMPU_EQ_QB
    18060U,	// CMPU_EQ_QB_MM
    17965U,	// CMPU_LE_QB
    17965U,	// CMPU_LE_QB_MM
    18179U,	// CMPU_LT_QB
    18179U,	// CMPU_LT_QB_MM
    268454371U,	// CMP_AF_D_MMR6
    268458708U,	// CMP_AF_S_MMR6
    268454810U,	// CMP_EQ_D
    268454810U,	// CMP_EQ_D_MMR6
    21785U,	// CMP_EQ_PH
    21785U,	// CMP_EQ_PH_MM
    268458906U,	// CMP_EQ_S
    268458906U,	// CMP_EQ_S_MMR6
    268454371U,	// CMP_F_D
    268458708U,	// CMP_F_S
    268454215U,	// CMP_LE_D
    268454215U,	// CMP_LE_D_MMR6
    21681U,	// CMP_LE_PH
    21681U,	// CMP_LE_PH_MM
    268458629U,	// CMP_LE_S
    268458629U,	// CMP_LE_S_MMR6
    268455301U,	// CMP_LT_D
    268455301U,	// CMP_LT_D_MMR6
    21954U,	// CMP_LT_PH
    21954U,	// CMP_LT_PH_MM
    268459001U,	// CMP_LT_S
    268459001U,	// CMP_LT_S_MMR6
    268454389U,	// CMP_SAF_D
    268454389U,	// CMP_SAF_D_MMR6
    268458718U,	// CMP_SAF_S
    268458718U,	// CMP_SAF_S_MMR6
    268454837U,	// CMP_SEQ_D
    268454837U,	// CMP_SEQ_D_MMR6
    268458925U,	// CMP_SEQ_S
    268458925U,	// CMP_SEQ_S_MMR6
    268454252U,	// CMP_SLE_D
    268454252U,	// CMP_SLE_D_MMR6
    268458658U,	// CMP_SLE_S
    268458658U,	// CMP_SLE_S_MMR6
    268455328U,	// CMP_SLT_D
    268455328U,	// CMP_SLT_D_MMR6
    268459020U,	// CMP_SLT_S
    268459020U,	// CMP_SLT_S_MMR6
    268454885U,	// CMP_SUEQ_D
    268454885U,	// CMP_SUEQ_D_MMR6
    268458956U,	// CMP_SUEQ_S
    268458956U,	// CMP_SUEQ_S_MMR6
    268454300U,	// CMP_SULE_D
    268454300U,	// CMP_SULE_D_MMR6
    268458689U,	// CMP_SULE_S
    268458689U,	// CMP_SULE_S_MMR6
    268455376U,	// CMP_SULT_D
    268455376U,	// CMP_SULT_D_MMR6
    268459051U,	// CMP_SULT_S
    268459051U,	// CMP_SULT_S_MMR6
    268454758U,	// CMP_SUN_D
    268454758U,	// CMP_SUN_D_MMR6
    268458870U,	// CMP_SUN_S
    268458870U,	// CMP_SUN_S_MMR6
    268454865U,	// CMP_UEQ_D
    268454865U,	// CMP_UEQ_D_MMR6
    268458945U,	// CMP_UEQ_S
    268458945U,	// CMP_UEQ_S_MMR6
    268454280U,	// CMP_ULE_D
    268454280U,	// CMP_ULE_D_MMR6
    268458678U,	// CMP_ULE_S
    268458678U,	// CMP_ULE_S_MMR6
    268455356U,	// CMP_ULT_D
    268455356U,	// CMP_ULT_D_MMR6
    268459040U,	// CMP_ULT_S
    268459040U,	// CMP_ULT_S_MMR6
    268454740U,	// CMP_UN_D
    268454740U,	// CMP_UN_D_MMR6
    268458860U,	// CMP_UN_S
    268458860U,	// CMP_UN_S_MMR6
    9945U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    1610630348U,	// COPY_S_B
    1610632520U,	// COPY_S_D
    1610634008U,	// COPY_S_H
    1610638062U,	// COPY_S_W
    1610630563U,	// COPY_U_B
    1610634275U,	// COPY_U_H
    1610638469U,	// COPY_U_W
    10518629U,	// CTC1
    10518629U,	// CTC1_MM
    10518829U,	// CTC2_MM
    17060U,	// CTCMSA
    23138U,	// CVT_D32_S
    24251U,	// CVT_D32_W
    24251U,	// CVT_D32_W_MM
    22325U,	// CVT_D64_L
    23138U,	// CVT_D64_S
    24251U,	// CVT_D64_W
    22325U,	// CVT_D_L_MMR6
    23138U,	// CVT_D_S_MM
    23138U,	// CVT_D_S_MMR6
    24251U,	// CVT_D_W_MMR6
    19178U,	// CVT_L_D64
    19178U,	// CVT_L_D64_MM
    19178U,	// CVT_L_D_MMR6
    23357U,	// CVT_L_S
    23357U,	// CVT_L_S_MM
    23357U,	// CVT_L_S_MMR6
    19525U,	// CVT_S_D32
    19525U,	// CVT_S_D32_MM
    19525U,	// CVT_S_D64
    19525U,	// CVT_S_D_MMR6
    22334U,	// CVT_S_L
    22334U,	// CVT_S_L_MMR6
    25006U,	// CVT_S_W
    25006U,	// CVT_S_W_MM
    25006U,	// CVT_S_W_MMR6
    20353U,	// CVT_W_D32
    20353U,	// CVT_W_D64
    20353U,	// CVT_W_D_MMR6
    20353U,	// CVT_W_MM
    23689U,	// CVT_W_S
    23689U,	// CVT_W_S_MM
    23689U,	// CVT_W_S_MMR6
    268454802U,	// C_EQ_D32
    268454802U,	// C_EQ_D32_MM
    268454802U,	// C_EQ_D64
    268454802U,	// C_EQ_D64_MM
    268458898U,	// C_EQ_S
    268458898U,	// C_EQ_S_MM
    268454364U,	// C_F_D32
    268454364U,	// C_F_D32_MM
    268454364U,	// C_F_D64
    268454364U,	// C_F_D64_MM
    268458701U,	// C_F_S
    268458701U,	// C_F_S_MM
    268454207U,	// C_LE_D32
    268454207U,	// C_LE_D32_MM
    268454207U,	// C_LE_D64
    268454207U,	// C_LE_D64_MM
    268458621U,	// C_LE_S
    268458621U,	// C_LE_S_MM
    268455293U,	// C_LT_D32
    268455293U,	// C_LT_D32_MM
    268455293U,	// C_LT_D64
    268455293U,	// C_LT_D64_MM
    268458993U,	// C_LT_S
    268458993U,	// C_LT_S_MM
    268454198U,	// C_NGE_D32
    268454198U,	// C_NGE_D32_MM
    268454198U,	// C_NGE_D64
    268454198U,	// C_NGE_D64_MM
    268458612U,	// C_NGE_S
    268458612U,	// C_NGE_S_MM
    268454233U,	// C_NGLE_D32
    268454233U,	// C_NGLE_D32_MM
    268454233U,	// C_NGLE_D64
    268454233U,	// C_NGLE_D64_MM
    268458639U,	// C_NGLE_S
    268458639U,	// C_NGLE_S_MM
    268454650U,	// C_NGL_D32
    268454650U,	// C_NGL_D32_MM
    268454650U,	// C_NGL_D64
    268454650U,	// C_NGL_D64_MM
    268458829U,	// C_NGL_S
    268458829U,	// C_NGL_S_MM
    268455284U,	// C_NGT_D32
    268455284U,	// C_NGT_D32_MM
    268455284U,	// C_NGT_D64
    268455284U,	// C_NGT_D64_MM
    268458984U,	// C_NGT_S
    268458984U,	// C_NGT_S_MM
    268454243U,	// C_OLE_D32
    268454243U,	// C_OLE_D32_MM
    268454243U,	// C_OLE_D64
    268454243U,	// C_OLE_D64_MM
    268458649U,	// C_OLE_S
    268458649U,	// C_OLE_S_MM
    268455319U,	// C_OLT_D32
    268455319U,	// C_OLT_D32_MM
    268455319U,	// C_OLT_D64
    268455319U,	// C_OLT_D64_MM
    268459011U,	// C_OLT_S
    268459011U,	// C_OLT_S_MM
    268454828U,	// C_SEQ_D32
    268454828U,	// C_SEQ_D32_MM
    268454828U,	// C_SEQ_D64
    268454828U,	// C_SEQ_D64_MM
    268458916U,	// C_SEQ_S
    268458916U,	// C_SEQ_S_MM
    268454434U,	// C_SF_D32
    268454434U,	// C_SF_D32_MM
    268454434U,	// C_SF_D64
    268454434U,	// C_SF_D64_MM
    268458747U,	// C_SF_S
    268458747U,	// C_SF_S_MM
    268454856U,	// C_UEQ_D32
    268454856U,	// C_UEQ_D32_MM
    268454856U,	// C_UEQ_D64
    268454856U,	// C_UEQ_D64_MM
    268458936U,	// C_UEQ_S
    268458936U,	// C_UEQ_S_MM
    268454271U,	// C_ULE_D32
    268454271U,	// C_ULE_D32_MM
    268454271U,	// C_ULE_D64
    268454271U,	// C_ULE_D64_MM
    268458669U,	// C_ULE_S
    268458669U,	// C_ULE_S_MM
    268455347U,	// C_ULT_D32
    268455347U,	// C_ULT_D32_MM
    268455347U,	// C_ULT_D64
    268455347U,	// C_ULT_D64_MM
    268459031U,	// C_ULT_S
    268459031U,	// C_ULT_S_MM
    268454732U,	// C_UN_D32
    268454732U,	// C_UN_D32_MM
    268454732U,	// C_UN_D64
    268454732U,	// C_UN_D64_MM
    268458852U,	// C_UN_S
    268458852U,	// C_UN_S_MM
    22777U,	// CmpRxRy16
    1879070454U,	// CmpiRxImm16
    22262U,	// CmpiRxImmX16
    550313U,	// Constant32
    268455872U,	// DADD
    268459370U,	// DADDIU_MM64R6
    268459318U,	// DADDU_MM64R6
    268455872U,	// DADD_MM64R6
    268457650U,	// DADDi
    268459370U,	// DADDiu
    268459318U,	// DADDu
    268457681U,	// DAHI
    2199951057U,	// DAHI_MM64R6
    268458154U,	// DALIGN
    268458154U,	// DALIGN_MM64R6
    268457742U,	// DATI
    2199951118U,	// DATI_MM64R6
    268457760U,	// DAUI
    268457760U,	// DAUI_MM64R6
    22737U,	// DBITSWAP
    22737U,	// DBITSWAP_MM64R6
    22712U,	// DCLO
    22712U,	// DCLO_MM64R6
    22712U,	// DCLO_R6
    25897U,	// DCLZ
    25897U,	// DCLZ_MM64R6
    25897U,	// DCLZ_R6
    268459552U,	// DDIV
    268459460U,	// DDIVU
    268459460U,	// DDIVU_MM64R6
    268459552U,	// DDIV_MM64R6
    9971U,	// DERET
    9971U,	// DERET_MM
    9971U,	// DERET_MMR6
    268461530U,	// DEXT
    268461500U,	// DEXTM
    268458129U,	// DEXTM_MM64R6
    268461543U,	// DEXTU
    268459453U,	// DEXTU_MM64R6
    268459286U,	// DEXT_MM64R6
    546485U,	// DI
    268461518U,	// DINS
    268461493U,	// DINSM
    268461493U,	// DINSM_MM64R6
    268461536U,	// DINSU
    268461536U,	// DINSU_MM64R6
    268461518U,	// DINS_MM64R6
    268459553U,	// DIV
    268459461U,	// DIVU
    268459461U,	// DIVU_MMR6
    268459553U,	// DIV_MMR6
    268453050U,	// DIV_S_B
    268455222U,	// DIV_S_D
    268456699U,	// DIV_S_H
    268460753U,	// DIV_S_W
    268453265U,	// DIV_U_B
    268455689U,	// DIV_U_D
    268456977U,	// DIV_U_H
    268461171U,	// DIV_U_W
    546485U,	// DI_MM
    546485U,	// DI_MMR6
    268452502U,	// DLSA
    2466546326U,	// DLSA_MM64R6
    268452502U,	// DLSA_R6
    268451849U,	// DMFC0
    268451849U,	// DMFC0_MM64R6
    16464U,	// DMFC1
    16464U,	// DMFC1_MM64R6
    268452120U,	// DMFC2
    16664U,	// DMFC2_MM64R6
    58736920U,	// DMFC2_OCTEON
    268455917U,	// DMOD
    268459332U,	// DMODU
    268459332U,	// DMODU_MM64R6
    268455917U,	// DMOD_MM64R6
    2736816158U,	// DMTC0
    2736816158U,	// DMTC0_MM64R6
    10518635U,	// DMTC1
    10518635U,	// DMTC1_MM64R6
    2736816435U,	// DMTC2
    10518835U,	// DMTC2_MM64R6
    58736947U,	// DMTC2_OCTEON
    268457637U,	// DMUH
    268459363U,	// DMUHU
    268459363U,	// DMUHU_MM64R6
    268457637U,	// DMUH_MM64R6
    268458071U,	// DMUL
    23812U,	// DMULT
    23989U,	// DMULTu
    268459407U,	// DMULU
    268459407U,	// DMULU_MM64R6
    268458071U,	// DMUL_MM64R6
    268458071U,	// DMUL_R6
    268455130U,	// DOTP_S_D
    268456619U,	// DOTP_S_H
    268460621U,	// DOTP_S_W
    268455597U,	// DOTP_U_D
    268456907U,	// DOTP_U_H
    268461079U,	// DOTP_U_W
    285232259U,	// DPADD_S_D
    285233748U,	// DPADD_S_H
    285237740U,	// DPADD_S_W
    285232726U,	// DPADD_U_D
    285234036U,	// DPADD_U_H
    285238208U,	// DPADD_U_W
    268457489U,	// DPAQX_SA_W_PH
    268457489U,	// DPAQX_SA_W_PH_MMR2
    268457572U,	// DPAQX_S_W_PH
    268457572U,	// DPAQX_S_W_PH_MMR2
    268460081U,	// DPAQ_SA_L_W
    268460081U,	// DPAQ_SA_L_W_MM
    268457531U,	// DPAQ_S_W_PH
    268457531U,	// DPAQ_S_W_PH_MM
    268457825U,	// DPAU_H_QBL
    268457825U,	// DPAU_H_QBL_MM
    268458366U,	// DPAU_H_QBR
    268458366U,	// DPAU_H_QBR_MM
    268457610U,	// DPAX_W_PH
    268457610U,	// DPAX_W_PH_MMR2
    268457479U,	// DPA_W_PH
    268457479U,	// DPA_W_PH_MMR2
    22782U,	// DPOP
    268457504U,	// DPSQX_SA_W_PH
    268457504U,	// DPSQX_SA_W_PH_MMR2
    268457586U,	// DPSQX_S_W_PH
    268457586U,	// DPSQX_S_W_PH_MMR2
    268460094U,	// DPSQ_SA_L_W
    268460094U,	// DPSQ_SA_L_W_MM
    268457559U,	// DPSQ_S_W_PH
    268457559U,	// DPSQ_S_W_PH_MM
    285232226U,	// DPSUB_S_D
    285233727U,	// DPSUB_S_H
    285237707U,	// DPSUB_S_W
    285232693U,	// DPSUB_U_D
    285234015U,	// DPSUB_U_H
    285238175U,	// DPSUB_U_W
    268457837U,	// DPSU_H_QBL
    268457837U,	// DPSU_H_QBL_MM
    268458378U,	// DPSU_H_QBR
    268458378U,	// DPSU_H_QBR_MM
    268457621U,	// DPSX_W_PH
    268457621U,	// DPSX_W_PH_MMR2
    268457600U,	// DPS_W_PH
    268457600U,	// DPS_W_PH_MMR2
    268458020U,	// DROL
    268458020U,	// DROLImm
    268458518U,	// DROR
    268458518U,	// DRORImm
    268458545U,	// DROTR
    268452093U,	// DROTR32
    268452093U,	// DROTR32_MM64R6
    268459596U,	// DROTRV
    268459596U,	// DROTRV_MM64R6
    268458545U,	// DROTR_MM64R6
    21606U,	// DSBH
    21606U,	// DSBH_MM64R6
    25974U,	// DSDIV
    268459552U,	// DSDivMacro
    20428U,	// DSHD
    20428U,	// DSHD_MM64R6
    268458014U,	// DSLL
    268452063U,	// DSLL32
    268452063U,	// DSLL32_MM64R6
    2952812574U,	// DSLL64_32
    268459558U,	// DSLLV
    268459558U,	// DSLLV_MM64R6
    268458014U,	// DSLL_MM64R6
    268452496U,	// DSRA
    268452045U,	// DSRA32
    268452045U,	// DSRA32_MM64R6
    268459537U,	// DSRAV
    268459537U,	// DSRAV_MM64R6
    268452496U,	// DSRA_MM64R6
    268458032U,	// DSRL
    268452071U,	// DSRL32
    268452071U,	// DSRL32_MM64R6
    268459565U,	// DSRLV
    268459565U,	// DSRLV_MM64R6
    268458032U,	// DSRL_MM64R6
    268453723U,	// DSUB
    268459297U,	// DSUBU_MM64R6
    268453723U,	// DSUB_MM64R6
    268459297U,	// DSUBu
    25960U,	// DUDIV
    268459460U,	// DUDivMacro
    547163U,	// DVP
    547163U,	// DVP_MMR6
    25975U,	// DivRxRy16
    25961U,	// DivuRxRy16
    9914U,	// EHB
    9914U,	// EHB_MM
    9914U,	// EHB_MMR6
    546497U,	// EI
    546497U,	// EI_MM
    546497U,	// EI_MMR6
    9972U,	// ERET
    9918U,	// ERETNC
    9918U,	// ERETNC_MMR6
    9972U,	// ERET_MM
    9972U,	// ERET_MMR6
    0U,	// ERet
    547168U,	// EVP
    547168U,	// EVP_MMR6
    268461531U,	// EXT
    268458325U,	// EXTP
    268458210U,	// EXTPDP
    268459580U,	// EXTPDPV
    268459580U,	// EXTPDPV_MM
    268458210U,	// EXTPDP_MM
    268459589U,	// EXTPV
    268459589U,	// EXTPV_MM
    268458325U,	// EXTP_MM
    268460814U,	// EXTRV_RS_W
    268460814U,	// EXTRV_RS_W_MM
    268460368U,	// EXTRV_R_W
    268460368U,	// EXTRV_R_W_MM
    268456708U,	// EXTRV_S_H
    268456708U,	// EXTRV_S_H_MM
    268461251U,	// EXTRV_W
    268461251U,	// EXTRV_W_MM
    268460803U,	// EXTR_RS_W
    268460803U,	// EXTR_RS_W_MM
    268460347U,	// EXTR_R_W
    268460347U,	// EXTR_R_W_MM
    268456639U,	// EXTR_S_H
    268456639U,	// EXTR_S_H_MM
    268460446U,	// EXTR_W
    268460446U,	// EXTR_W_MM
    268461524U,	// EXTS
    268461463U,	// EXTS32
    268461531U,	// EXT_MM
    268459287U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19794U,	// FABS_D32
    19794U,	// FABS_D64
    19794U,	// FABS_MM
    23512U,	// FABS_S
    23512U,	// FABS_S_MM
    0U,	// FABS_W
    268454147U,	// FADD_D
    268454148U,	// FADD_D32
    268454148U,	// FADD_D64
    285231364U,	// FADD_D_MMR6
    268454148U,	// FADD_MM
    268458605U,	// FADD_S
    268458605U,	// FADD_S_MM
    285235821U,	// FADD_S_MMR6
    268459716U,	// FADD_W
    268454381U,	// FCAF_D
    268459835U,	// FCAF_W
    268454820U,	// FCEQ_D
    268460274U,	// FCEQ_W
    19801U,	// FCLASS_D
    25370U,	// FCLASS_W
    268454225U,	// FCLE_D
    268459758U,	// FCLE_W
    268455311U,	// FCLT_D
    268460853U,	// FCLT_W
    2483757U,	// FCMP_D32
    2483757U,	// FCMP_D32_MM
    2483757U,	// FCMP_D64
    2745901U,	// FCMP_S32
    2745901U,	// FCMP_S32_MM
    268454321U,	// FCNE_D
    268459792U,	// FCNE_W
    268454930U,	// FCOR_D
    268460403U,	// FCOR_W
    268454876U,	// FCUEQ_D
    268460290U,	// FCUEQ_W
    268454291U,	// FCULE_D
    268459774U,	// FCULE_W
    268455367U,	// FCULT_D
    268460869U,	// FCULT_W
    268454337U,	// FCUNE_D
    268459808U,	// FCUNE_W
    268454750U,	// FCUN_D
    268460180U,	// FCUN_W
    268455743U,	// FDIV_D
    268455744U,	// FDIV_D32
    268455744U,	// FDIV_D64
    285232960U,	// FDIV_D_MMR6
    268455744U,	// FDIV_MM
    268459088U,	// FDIV_S
    268459088U,	// FDIV_S_MM
    285236304U,	// FDIV_S_MMR6
    268461235U,	// FDIV_W
    268456366U,	// FEXDO_H
    268460196U,	// FEXDO_W
    268454034U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    268459619U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19218U,	// FEXUPL_D
    24666U,	// FEXUPL_W
    19490U,	// FEXUPR_D
    24963U,	// FEXUPR_W
    19732U,	// FFINT_S_D
    25263U,	// FFINT_S_W
    20211U,	// FFINT_U_D
    25693U,	// FFINT_U_W
    19228U,	// FFQL_D
    24676U,	// FFQL_W
    19500U,	// FFQR_D
    24973U,	// FFQR_W
    17361U,	// FILL_B
    19203U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20871U,	// FILL_H
    24651U,	// FILL_W
    18569U,	// FLOG2_D
    24154U,	// FLOG2_W
    19167U,	// FLOOR_L_D64
    19167U,	// FLOOR_L_D_MMR6
    23346U,	// FLOOR_L_S
    23346U,	// FLOOR_L_S_MMR6
    20342U,	// FLOOR_W_D32
    20342U,	// FLOOR_W_D64
    20342U,	// FLOOR_W_D_MMR6
    20342U,	// FLOOR_W_MM
    23678U,	// FLOOR_W_S
    23678U,	// FLOOR_W_S_MM
    23678U,	// FLOOR_W_S_MMR6
    285231371U,	// FMADD_D
    285236940U,	// FMADD_W
    268454072U,	// FMAX_A_D
    268459657U,	// FMAX_A_W
    268455818U,	// FMAX_D
    268461260U,	// FMAX_W
    268454052U,	// FMIN_A_D
    268459637U,	// FMIN_A_W
    268454724U,	// FMIN_D
    268460172U,	// FMIN_W
    20303U,	// FMOV_D32
    20303U,	// FMOV_D32_MM
    20303U,	// FMOV_D64
    20303U,	// FMOV_D_MMR6
    23639U,	// FMOV_S
    23639U,	// FMOV_S_MM
    23639U,	// FMOV_S_MMR6
    285231329U,	// FMSUB_D
    285236898U,	// FMSUB_W
    268454708U,	// FMUL_D
    268454709U,	// FMUL_D32
    268454709U,	// FMUL_D64
    285231925U,	// FMUL_D_MMR6
    268454709U,	// FMUL_MM
    268458838U,	// FMUL_S
    268458838U,	// FMUL_S_MM
    285236054U,	// FMUL_S_MMR6
    268460156U,	// FMUL_W
    18995U,	// FNEG_D32
    18995U,	// FNEG_D64
    18995U,	// FNEG_D_MMR6
    18995U,	// FNEG_MM
    23307U,	// FNEG_S
    23307U,	// FNEG_S_MM
    23307U,	// FNEG_S_MMR6
    19329U,	// FRCP_D
    24749U,	// FRCP_W
    19949U,	// FRINT_D
    25439U,	// FRINT_W
    19977U,	// FRSQRT_D
    25467U,	// FRSQRT_W
    268454400U,	// FSAF_D
    268459843U,	// FSAF_W
    268454848U,	// FSEQ_D
    268460282U,	// FSEQ_W
    268454263U,	// FSLE_D
    268459766U,	// FSLE_W
    268455339U,	// FSLT_D
    268460861U,	// FSLT_W
    268454329U,	// FSNE_D
    268459800U,	// FSNE_W
    268454938U,	// FSOR_D
    268460411U,	// FSOR_W
    19968U,	// FSQRT_D
    19969U,	// FSQRT_D32
    19969U,	// FSQRT_D64
    19969U,	// FSQRT_MM
    23616U,	// FSQRT_S
    23616U,	// FSQRT_S_MM
    25458U,	// FSQRT_W
    268454105U,	// FSUB_D
    268454106U,	// FSUB_D32
    268454106U,	// FSUB_D64
    285231322U,	// FSUB_D_MMR6
    268454106U,	// FSUB_MM
    268458587U,	// FSUB_S
    268458587U,	// FSUB_S_MM
    285235803U,	// FSUB_S_MMR6
    268459674U,	// FSUB_W
    268454897U,	// FSUEQ_D
    268460299U,	// FSUEQ_W
    268454312U,	// FSULE_D
    268459783U,	// FSULE_W
    268455388U,	// FSULT_D
    268460878U,	// FSULT_W
    268454346U,	// FSUNE_D
    268459817U,	// FSUNE_W
    268454769U,	// FSUN_D
    268460188U,	// FSUN_W
    19743U,	// FTINT_S_D
    25274U,	// FTINT_S_W
    20222U,	// FTINT_U_D
    25704U,	// FTINT_U_W
    268456443U,	// FTQ_H
    268460308U,	// FTQ_W
    19565U,	// FTRUNC_S_D
    25046U,	// FTRUNC_S_W
    20032U,	// FTRUNC_U_D
    25514U,	// FTRUNC_U_W
    3238024941U,	// GotPrologue16
    268455033U,	// HADD_S_D
    268456522U,	// HADD_S_H
    268460514U,	// HADD_S_W
    268455500U,	// HADD_U_D
    268456810U,	// HADD_U_H
    268460982U,	// HADD_U_W
    268455000U,	// HSUB_S_D
    268456501U,	// HSUB_S_H
    268460481U,	// HSUB_S_W
    268455467U,	// HSUB_U_D
    268456789U,	// HSUB_U_H
    268460949U,	// HSUB_U_W
    268453320U,	// ILVEV_B
    268455734U,	// ILVEV_D
    268457032U,	// ILVEV_H
    268461226U,	// ILVEV_W
    268452848U,	// ILVL_B
    268454716U,	// ILVL_D
    268456358U,	// ILVL_H
    268460164U,	// ILVL_W
    268452600U,	// ILVOD_B
    268454189U,	// ILVOD_D
    268456160U,	// ILVOD_H
    268459749U,	// ILVOD_W
    268452896U,	// ILVR_B
    268454973U,	// ILVR_D
    268456483U,	// ILVR_H
    268460454U,	// ILVR_W
    268461513U,	// INS
    70010095U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    78401014U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    86790971U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    95183720U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    16801364U,	// INSV
    103564033U,	// INSVE_B
    111954387U,	// INSVE_D
    120344809U,	// INSVE_H
    128737074U,	// INSVE_W
    16801364U,	// INSV_MM
    268461513U,	// INS_MM
    268459218U,	// INS_MMR6
    546603U,	// J
    546636U,	// JAL
    23051U,	// JALR
    547339U,	// JALR16_MM
    23051U,	// JALR64
    0U,	// JALR64Pseudo
    547339U,	// JALRC16_MMR6
    17899U,	// JALRC_HB_MMR6
    18438U,	// JALRC_MMR6
    0U,	// JALRPseudo
    541183U,	// JALRS16_MM
    23767U,	// JALRS_MM
    17916U,	// JALR_HB
    23051U,	// JALR_MM
    548026U,	// JALS_MM
    550135U,	// JALX
    550135U,	// JALX_MM
    546636U,	// JAL_MM
    18317U,	// JIALC
    18317U,	// JIALC64
    18317U,	// JIALC_MMR6
    18306U,	// JIC
    18306U,	// JIC64
    18306U,	// JIC_MMR6
    547335U,	// JR
    541170U,	// JR16_MM
    547335U,	// JR64
    547146U,	// JRADDIUSP
    542721U,	// JRC16_MM
    541064U,	// JRC16_MMR6
    547134U,	// JRCADDIUSP_MMR6
    542197U,	// JR_HB
    542197U,	// JR_HB_R6
    547335U,	// JR_MM
    546603U,	// J_MM
    3282764U,	// Jal16
    3544908U,	// JalB16
    546636U,	// JalOneReg
    22348U,	// JalTwoReg
    9906U,	// JrRa16
    9897U,	// JrcRa16
    550236U,	// JrcRx16
    540673U,	// JumpLinkReg16
    134235653U,	// LB
    134235653U,	// LB64
    134238199U,	// LBE
    134238199U,	// LBE_MM
    134238199U,	// LBE_MMR6
    134234639U,	// LBU16_MM
    134238305U,	// LBUE_MMR6
    3506463997U,	// LBUX
    3506463997U,	// LBUX_MM
    134241564U,	// LBU_MMR6
    134235653U,	// LB_MM
    134235653U,	// LB_MMR6
    134241564U,	// LBu
    134241564U,	// LBu64
    134238305U,	// LBuE
    134238305U,	// LBuE_MM
    134241564U,	// LBu_MM
    134238163U,	// LD
    134234174U,	// LDC1
    134234174U,	// LDC164
    134234174U,	// LDC1_D64_MMR6
    134234174U,	// LDC1_MM
    134234374U,	// LDC2
    134234374U,	// LDC2_MMR6
    134234374U,	// LDC2_R6
    134234459U,	// LDC3
    17187U,	// LDI_B
    19011U,	// LDI_D
    20747U,	// LDI_H
    24501U,	// LDI_W
    134240168U,	// LDL
    134243749U,	// LDMacro
    18384U,	// LDPC
    18384U,	// LDPC_MM64R6
    134240709U,	// LDR
    3506454654U,	// LDXC1
    3506454654U,	// LDXC164
    134234857U,	// LD_B
    134236446U,	// LD_D
    0U,	// LD_F16
    134238417U,	// LD_H
    134238163U,	// LD_MM64R6
    134242006U,	// LD_W
    25189739U,	// LEA_ADDiu
    25189738U,	// LEA_ADDiu64
    25189739U,	// LEA_ADDiu_MM
    134239352U,	// LH
    134239352U,	// LH64
    134238246U,	// LHE
    134238246U,	// LHE_MM
    134234662U,	// LHU16_MM
    3506463986U,	// LHX
    3506463986U,	// LHX_MM
    134239352U,	// LH_MM
    134241630U,	// LHu
    134241630U,	// LHu64
    134238311U,	// LHuE
    134238311U,	// LHuE_MM
    134241630U,	// LHu_MM
    16830U,	// LI16_MM
    16830U,	// LI16_MMR6
    134240264U,	// LL
    134240264U,	// LL64
    134240264U,	// LL64_R6
    134238162U,	// LLD
    134238162U,	// LLD_MM64R6
    134238162U,	// LLD_R6
    134238261U,	// LLE
    134238261U,	// LLE_MM
    134238261U,	// LLE_MMR6
    134240264U,	// LL_MM
    134240264U,	// LL_R6
    134234119U,	// LOAD_ACC128
    134234119U,	// LOAD_ACC64
    134234119U,	// LOAD_ACC64DSP
    134240527U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    268452503U,	// LSA
    2467086999U,	// LSA_MMR6
    268452503U,	// LSA_R6
    58742566U,	// LUI_MMR6
    3506454668U,	// LUXC1
    3506454668U,	// LUXC164
    3506454668U,	// LUXC1_MM
    58742566U,	// LUi
    58742566U,	// LUi64
    58742566U,	// LUi_MM
    134243554U,	// LW
    134234669U,	// LW16_MM
    134243554U,	// LW64
    134234226U,	// LWC1
    134234226U,	// LWC1_MM
    134234426U,	// LWC2
    134234426U,	// LWC2_MMR6
    134234426U,	// LWC2_R6
    134234471U,	// LWC3
    134238323U,	// LWE
    134238323U,	// LWE_MM
    134238323U,	// LWE_MMR6
    134243554U,	// LWGP_MM
    134240363U,	// LWL
    134240363U,	// LWL64
    134238266U,	// LWLE
    134238266U,	// LWLE_MM
    134240363U,	// LWL_MM
    3817947U,	// LWM16_MM
    3817947U,	// LWM16_MMR6
    3817711U,	// LWM32_MM
    3823768U,	// LWM_MM
    18421U,	// LWPC
    18421U,	// LWPC_MMR6
    170341U,	// LWP_MM
    170341U,	// LWP_MMR6
    134240831U,	// LWR
    134240831U,	// LWR64
    134238293U,	// LWRE
    134238293U,	// LWRE_MM
    134240831U,	// LWR_MM
    134243554U,	// LWSP_MM
    18414U,	// LWUPC
    18414U,	// LWUPC_MM64R6
    134241739U,	// LWU_MM
    134241739U,	// LWU_MM64R6
    3506464003U,	// LWX
    3506454682U,	// LWXC1
    3506454682U,	// LWXC1_MM
    3506461918U,	// LWXS_MM
    3506464003U,	// LWX_MM
    134243554U,	// LW_MM
    134243554U,	// LW_MMR6
    134241739U,	// LWu
    134235653U,	// LbRxRyOffMemX16
    134241564U,	// LbuRxRyOffMemX16
    134239352U,	// LhRxRyOffMemX16
    134241630U,	// LhuRxRyOffMemX16
    1879070445U,	// LiRxImm16
    22243U,	// LiRxImmAlignX16
    22253U,	// LiRxImmX16
    16981U,	// LoadAddrImm32
    17002U,	// LoadAddrImm64
    134234709U,	// LoadAddrReg32
    134234730U,	// LoadAddrReg64
    22253U,	// LoadImm32
    22257U,	// LoadImm64
    3957986U,	// LwConstant32
    536896738U,	// LwRxPcTcp16
    25826U,	// LwRxPcTcpX16
    134243554U,	// LwRxRyOffMemX16
    134243554U,	// LwRxSpImmX16
    20422U,	// MADD
    285231633U,	// MADDF_D
    285231633U,	// MADDF_D_MMR6
    285235954U,	// MADDF_S
    285235954U,	// MADDF_S_MMR6
    285233631U,	// MADDR_Q_H
    285237469U,	// MADDR_Q_W
    23869U,	// MADDU
    268459325U,	// MADDU_DSP
    268459325U,	// MADDU_DSP_MM
    23869U,	// MADDU_MM
    285230518U,	// MADDV_B
    285232932U,	// MADDV_D
    285234230U,	// MADDV_H
    285238424U,	// MADDV_W
    268454156U,	// MADD_D32
    268454156U,	// MADD_D32_MM
    268454156U,	// MADD_D64
    268455878U,	// MADD_DSP
    268455878U,	// MADD_DSP_MM
    20422U,	// MADD_MM
    285233601U,	// MADD_Q_H
    285237439U,	// MADD_Q_W
    268458604U,	// MADD_S
    268458604U,	// MADD_S_MM
    268457931U,	// MAQ_SA_W_PHL
    268457931U,	// MAQ_SA_W_PHL_MM
    268458447U,	// MAQ_SA_W_PHR
    268458447U,	// MAQ_SA_W_PHR_MM
    268457959U,	// MAQ_S_W_PHL
    268457959U,	// MAQ_S_W_PHL_MM
    268458475U,	// MAQ_S_W_PHR
    268458475U,	// MAQ_S_W_PHR_MM
    268454097U,	// MAXA_D
    268454097U,	// MAXA_D_MMR6
    268458577U,	// MAXA_S
    268458577U,	// MAXA_S_MMR6
    268452971U,	// MAXI_S_B
    268455111U,	// MAXI_S_D
    268456600U,	// MAXI_S_H
    268460592U,	// MAXI_S_W
    268453186U,	// MAXI_U_B
    268455578U,	// MAXI_U_D
    268456888U,	// MAXI_U_H
    268461060U,	// MAXI_U_W
    268452552U,	// MAX_A_B
    268454073U,	// MAX_A_D
    268456112U,	// MAX_A_H
    268459658U,	// MAX_A_W
    268455819U,	// MAX_D
    268455819U,	// MAX_D_MMR6
    268459154U,	// MAX_S
    268453059U,	// MAX_S_B
    268455231U,	// MAX_S_D
    268456719U,	// MAX_S_H
    268459154U,	// MAX_S_MMR6
    268460773U,	// MAX_S_W
    268453274U,	// MAX_U_B
    268455698U,	// MAX_U_D
    268456986U,	// MAX_U_H
    268461180U,	// MAX_U_W
    268451850U,	// MFC0
    268451850U,	// MFC0_MMR6
    16465U,	// MFC1
    16465U,	// MFC1_MM
    16465U,	// MFC1_MMR6
    268452121U,	// MFC2
    16665U,	// MFC2_MMR6
    268451856U,	// MFHC0_MMR6
    16471U,	// MFHC1_D32
    16471U,	// MFHC1_D32_MMR6
    16471U,	// MFHC1_D64
    16471U,	// MFHC1_D64_MMR6
    16471U,	// MFHC1_MM
    16671U,	// MFHC2_MMR6
    546519U,	// MFHI
    546519U,	// MFHI16_MM
    546519U,	// MFHI64
    22231U,	// MFHI_DSP
    22231U,	// MFHI_DSP_MM
    546519U,	// MFHI_MM
    547006U,	// MFLO
    547006U,	// MFLO16_MM
    547006U,	// MFLO64
    22718U,	// MFLO_DSP
    22718U,	// MFLO_DSP_MM
    547006U,	// MFLO_MM
    268454082U,	// MINA_D
    268454082U,	// MINA_D_MMR6
    268458569U,	// MINA_S
    268458569U,	// MINA_S_MMR6
    268452951U,	// MINI_S_B
    268455091U,	// MINI_S_D
    268456580U,	// MINI_S_H
    268460572U,	// MINI_S_W
    268453166U,	// MINI_U_B
    268455558U,	// MINI_U_D
    268456868U,	// MINI_U_H
    268461040U,	// MINI_U_W
    268452533U,	// MIN_A_B
    268454053U,	// MIN_A_D
    268456093U,	// MIN_A_H
    268459638U,	// MIN_A_W
    268454725U,	// MIN_D
    268454725U,	// MIN_D_MMR6
    268458845U,	// MIN_S
    268452981U,	// MIN_S_B
    268455121U,	// MIN_S_D
    268456610U,	// MIN_S_H
    268458845U,	// MIN_S_MMR6
    268460612U,	// MIN_S_W
    268453196U,	// MIN_U_B
    268455588U,	// MIN_U_D
    268456898U,	// MIN_U_H
    268461070U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    268455918U,	// MOD
    268453721U,	// MODSUB
    268453721U,	// MODSUB_MM
    268459333U,	// MODU
    268459333U,	// MODU_MMR6
    268455918U,	// MOD_MMR6
    268452914U,	// MOD_S_B
    268455054U,	// MOD_S_D
    268456543U,	// MOD_S_H
    268460535U,	// MOD_S_W
    268453129U,	// MOD_U_B
    268455521U,	// MOD_U_D
    268456831U,	// MOD_U_H
    268461003U,	// MOD_U_W
    20589U,	// MOVE16_MM
    16808U,	// MOVE16_MMR6
    3808844010U,	// MOVEP_MM
    24023U,	// MOVE_V
    268454442U,	// MOVF_D32
    268454442U,	// MOVF_D32_MM
    268454442U,	// MOVF_D64
    268456073U,	// MOVF_I
    268456073U,	// MOVF_I64
    268456073U,	// MOVF_I_MM
    268458755U,	// MOVF_S
    268458755U,	// MOVF_S_MM
    268454777U,	// MOVN_I64_D64
    268458162U,	// MOVN_I64_I
    268458162U,	// MOVN_I64_I64
    268458881U,	// MOVN_I64_S
    268454777U,	// MOVN_I_D32
    268454777U,	// MOVN_I_D32_MM
    268454777U,	// MOVN_I_D64
    268458162U,	// MOVN_I_I
    268458162U,	// MOVN_I_I64
    268458162U,	// MOVN_I_MM
    268458881U,	// MOVN_I_S
    268458881U,	// MOVN_I_S_MM
    268455449U,	// MOVT_D32
    268455449U,	// MOVT_D32_MM
    268455449U,	// MOVT_D64
    268459280U,	// MOVT_I
    268459280U,	// MOVT_I64
    268459280U,	// MOVT_I_MM
    268459080U,	// MOVT_S
    268459080U,	// MOVT_S_MM
    268455859U,	// MOVZ_I64_D64
    268461392U,	// MOVZ_I64_I
    268461392U,	// MOVZ_I64_I64
    268459181U,	// MOVZ_I64_S
    268455859U,	// MOVZ_I_D32
    268455859U,	// MOVZ_I_D32_MM
    268455859U,	// MOVZ_I_D64
    268461392U,	// MOVZ_I_I
    268461392U,	// MOVZ_I_I64
    268461392U,	// MOVZ_I_MM
    268459181U,	// MOVZ_I_S
    268459181U,	// MOVZ_I_S_MM
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    18273U,	// MSUB
    285231624U,	// MSUBF_D
    285231624U,	// MSUBF_D_MMR6
    285235945U,	// MSUBF_S
    285235945U,	// MSUBF_S_MMR6
    285233620U,	// MSUBR_Q_H
    285237458U,	// MSUBR_Q_W
    23848U,	// MSUBU
    268459304U,	// MSUBU_DSP
    268459304U,	// MSUBU_DSP_MM
    23848U,	// MSUBU_MM
    285230509U,	// MSUBV_B
    285232923U,	// MSUBV_D
    285234221U,	// MSUBV_H
    285238415U,	// MSUBV_W
    268454114U,	// MSUB_D32
    268454114U,	// MSUB_D32_MM
    268454114U,	// MSUB_D64
    268453729U,	// MSUB_DSP
    268453729U,	// MSUB_DSP_MM
    18273U,	// MSUB_MM
    285233591U,	// MSUB_Q_H
    285237429U,	// MSUB_Q_W
    268458586U,	// MSUB_S
    268458586U,	// MSUB_S_MM
    2736816159U,	// MTC0
    2736816159U,	// MTC0_MMR6
    10518636U,	// MTC1
    10518636U,	// MTC1_MM
    10518636U,	// MTC1_MMR6
    2736816436U,	// MTC2
    10518836U,	// MTC2_MMR6
    2736816151U,	// MTHC0_MMR6
    10535006U,	// MTHC1_D32
    10535006U,	// MTHC1_D32_MMR6
    10535006U,	// MTHC1_D64
    10535006U,	// MTHC1_D64_MMR6
    10535006U,	// MTHC1_MM
    10518822U,	// MTHC2_MMR6
    546525U,	// MTHI
    546525U,	// MTHI64
    10524381U,	// MTHI_DSP
    10524381U,	// MTHI_DSP_MM
    546525U,	// MTHI_MM
    10524913U,	// MTHLIP
    10524913U,	// MTHLIP_MM
    547019U,	// MTLO
    547019U,	// MTLO64
    10524875U,	// MTLO_DSP
    10524875U,	// MTLO_DSP_MM
    547019U,	// MTLO_MM
    540715U,	// MTM0
    540840U,	// MTM1
    540998U,	// MTM2
    540721U,	// MTP0
    540846U,	// MTP1
    541004U,	// MTP2
    268457638U,	// MUH
    268459364U,	// MUHU
    268459364U,	// MUHU_MMR6
    268457638U,	// MUH_MMR6
    268458072U,	// MUL
    268457972U,	// MULEQ_S_W_PHL
    268457972U,	// MULEQ_S_W_PHL_MM
    268458488U,	// MULEQ_S_W_PHR
    268458488U,	// MULEQ_S_W_PHR_MM
    268457849U,	// MULEU_S_PH_QBL
    268457849U,	// MULEU_S_PH_QBL_MM
    268458390U,	// MULEU_S_PH_QBR
    268458390U,	// MULEU_S_PH_QBR_MM
    268457398U,	// MULQ_RS_PH
    268457398U,	// MULQ_RS_PH_MM
    268460792U,	// MULQ_RS_W
    268460792U,	// MULQ_RS_W_MMR2
    268457342U,	// MULQ_S_PH
    268457342U,	// MULQ_S_PH_MMR2
    268460651U,	// MULQ_S_W
    268460651U,	// MULQ_S_W_MMR2
    268456426U,	// MULR_Q_H
    268460264U,	// MULR_Q_W
    268457544U,	// MULSAQ_S_W_PH
    268457544U,	// MULSAQ_S_W_PH_MM
    268457519U,	// MULSA_W_PH
    268457519U,	// MULSA_W_PH_MMR2
    23813U,	// MULT
    268459446U,	// MULTU_DSP
    268459446U,	// MULTU_DSP_MM
    268459269U,	// MULT_DSP
    268459269U,	// MULT_DSP_MM
    23813U,	// MULT_MM
    23990U,	// MULTu
    23990U,	// MULTu_MM
    268459401U,	// MULU
    268459401U,	// MULU_MMR6
    268453329U,	// MULV_B
    268455751U,	// MULV_D
    268457041U,	// MULV_H
    268461243U,	// MULV_W
    268458072U,	// MUL_MM
    268458072U,	// MUL_MMR6
    268457215U,	// MUL_PH
    268457215U,	// MUL_PH_MMR2
    268456395U,	// MUL_Q_H
    268460233U,	// MUL_Q_W
    268458072U,	// MUL_R6
    268457310U,	// MUL_S_PH
    268457310U,	// MUL_S_PH_MMR2
    546519U,	// Mfhi16
    547006U,	// Mflo16
    20589U,	// Move32R16
    20589U,	// MoveR3216
    23813U,	// MultRxRy16
    142908677U,	// MultRxRyRz16
    23990U,	// MultuRxRy16
    142908854U,	// MultuRxRyRz16
    17112U,	// NLOC_B
    18675U,	// NLOC_D
    20672U,	// NLOC_H
    24235U,	// NLOC_W
    17120U,	// NLZC_B
    18683U,	// NLZC_D
    20680U,	// NLZC_H
    24243U,	// NLZC_W
    268454164U,	// NMADD_D32
    268454164U,	// NMADD_D32_MM
    268454164U,	// NMADD_D64
    268458603U,	// NMADD_S
    268458603U,	// NMADD_S_MM
    268454122U,	// NMSUB_D32
    268454122U,	// NMSUB_D32_MM
    268454122U,	// NMSUB_D64
    268458585U,	// NMSUB_S
    268458585U,	// NMSUB_S_MM
    0U,	// NOP
    268458513U,	// NOR
    268458513U,	// NOR64
    268452737U,	// NORI_B
    268458513U,	// NORImm
    268458513U,	// NOR_MM
    268458513U,	// NOR_MMR6
    268459495U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16904U,	// NOT16_MM
    16904U,	// NOT16_MMR6
    20623U,	// NegRxRy16
    23819U,	// NotRxRy16
    268458514U,	// OR
    9224697U,	// OR16_MM
    9224697U,	// OR16_MMR6
    268458514U,	// OR64
    268452738U,	// ORI_B
    268457737U,	// ORI_MMR6
    268458514U,	// OR_MM
    268458514U,	// OR_MMR6
    268459496U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    268457737U,	// ORi
    268457737U,	// ORi64
    268457737U,	// ORi_MM
    16800274U,	// OrRxRxRy16
    268457204U,	// PACKRL_PH
    268457204U,	// PACKRL_PH_MM
    9925U,	// PAUSE
    9925U,	// PAUSE_MM
    9925U,	// PAUSE_MMR6
    268453311U,	// PCKEV_B
    268455725U,	// PCKEV_D
    268457023U,	// PCKEV_H
    268461217U,	// PCKEV_W
    268452591U,	// PCKOD_B
    268454180U,	// PCKOD_D
    268456151U,	// PCKOD_H
    268459740U,	// PCKOD_W
    17639U,	// PCNT_B
    19941U,	// PCNT_D
    21299U,	// PCNT_H
    25431U,	// PCNT_W
    268457168U,	// PICK_PH
    268457168U,	// PICK_PH_MM
    268453453U,	// PICK_QB
    268453453U,	// PICK_QB_MM
    22783U,	// POP
    22424U,	// PRECEQU_PH_QBL
    16985U,	// PRECEQU_PH_QBLA
    16985U,	// PRECEQU_PH_QBLA_MM
    22424U,	// PRECEQU_PH_QBL_MM
    22965U,	// PRECEQU_PH_QBR
    17023U,	// PRECEQU_PH_QBRA
    17023U,	// PRECEQU_PH_QBRA_MM
    22965U,	// PRECEQU_PH_QBR_MM
    22489U,	// PRECEQ_W_PHL
    22489U,	// PRECEQ_W_PHL_MM
    23005U,	// PRECEQ_W_PHR
    23005U,	// PRECEQ_W_PHR_MM
    22409U,	// PRECEU_PH_QBL
    16969U,	// PRECEU_PH_QBLA
    16969U,	// PRECEU_PH_QBLA_MM
    22409U,	// PRECEU_PH_QBL_MM
    22950U,	// PRECEU_PH_QBR
    17007U,	// PRECEU_PH_QBRA
    17007U,	// PRECEU_PH_QBRA_MM
    22950U,	// PRECEU_PH_QBR_MM
    268457120U,	// PRECRQU_S_QB_PH
    268457120U,	// PRECRQU_S_QB_PH_MM
    268459883U,	// PRECRQ_PH_W
    268459883U,	// PRECRQ_PH_W_MM
    268457093U,	// PRECRQ_QB_PH
    268457093U,	// PRECRQ_QB_PH_MM
    268459914U,	// PRECRQ_RS_PH_W
    268459914U,	// PRECRQ_RS_PH_W_MM
    268457107U,	// PRECR_QB_PH
    268457107U,	// PRECR_QB_PH_MMR2
    268459867U,	// PRECR_SRA_PH_W
    268459867U,	// PRECR_SRA_PH_W_MMR2
    268459896U,	// PRECR_SRA_R_PH_W
    268459896U,	// PRECR_SRA_R_PH_W_MMR2
    1937539U,	// PREF
    1937422U,	// PREFE
    1937422U,	// PREFE_MM
    1937422U,	// PREFE_MMR6
    151889131U,	// PREFX_MM
    1937539U,	// PREF_MM
    1937539U,	// PREF_MMR6
    1937539U,	// PREF_R6
    268455900U,	// PREPEND
    268455900U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16391U,	// PseudoCVT_D32_W
    16391U,	// PseudoCVT_D64_L
    16391U,	// PseudoCVT_D64_W
    16391U,	// PseudoCVT_S_L
    16391U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    268455766U,	// PseudoTRUNC_W_D
    268455766U,	// PseudoTRUNC_W_D32
    268459102U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    18249U,	// RADDU_W_QB
    18249U,	// RADDU_W_QB_MM
    41965872U,	// RDDSP
    159406384U,	// RDDSP_MM
    23096U,	// RDHWR
    23096U,	// RDHWR64
    23096U,	// RDHWR_MM
    268458552U,	// RDHWR_MMR6
    23073U,	// RDPGPR_MMR6
    19337U,	// RECIP_D
    19337U,	// RECIP_D_MM
    23433U,	// RECIP_S
    23433U,	// RECIP_S_MM
    22003U,	// REPLV_PH
    22003U,	// REPLV_PH_MM
    18229U,	// REPLV_QB
    18229U,	// REPLV_QB_MM
    41964770U,	// REPL_PH
    41964770U,	// REPL_PH_MM
    167790175U,	// REPL_QB
    167790175U,	// REPL_QB_MM
    19950U,	// RINT_D
    19950U,	// RINT_D_MMR6
    23607U,	// RINT_S
    23607U,	// RINT_S_MMR6
    268458021U,	// ROL
    268458021U,	// ROLImm
    268458519U,	// ROR
    268458519U,	// RORImm
    268458546U,	// ROTR
    268459597U,	// ROTRV
    268459597U,	// ROTRV_MM
    268458546U,	// ROTR_MM
    19146U,	// ROUND_L_D64
    19146U,	// ROUND_L_D_MMR6
    23325U,	// ROUND_L_S
    23325U,	// ROUND_L_S_MMR6
    20321U,	// ROUND_W_D32
    20321U,	// ROUND_W_D64
    20321U,	// ROUND_W_D_MMR6
    20321U,	// ROUND_W_MM
    23657U,	// ROUND_W_S
    23657U,	// ROUND_W_S_MM
    23657U,	// ROUND_W_S_MMR6
    19978U,	// RSQRT_D
    19978U,	// RSQRT_D_MM
    23615U,	// RSQRT_S
    23615U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    268453020U,	// SAT_S_B
    268455170U,	// SAT_S_D
    268456669U,	// SAT_S_H
    268460701U,	// SAT_S_W
    268453247U,	// SAT_U_B
    268455649U,	// SAT_U_D
    268456959U,	// SAT_U_H
    268461131U,	// SAT_U_W
    134235989U,	// SB
    134234492U,	// SB16_MM
    134234492U,	// SB16_MMR6
    134235989U,	// SB64
    134238204U,	// SBE
    134238204U,	// SBE_MM
    134238204U,	// SBE_MMR6
    134235989U,	// SB_MM
    134235989U,	// SB_MMR6
    4229136U,	// SC
    4229136U,	// SC64
    4229136U,	// SC64_R6
    4231099U,	// SCD
    4231099U,	// SCD_R6
    4231169U,	// SCE
    4231169U,	// SCE_MM
    134238209U,	// SCE_MMR6
    4229136U,	// SC_MM
    4229136U,	// SC_R6
    134238195U,	// SD
    186587U,	// SDBBP
    82409U,	// SDBBP16_MM
    82409U,	// SDBBP16_MMR6
    596187U,	// SDBBP_MM
    186587U,	// SDBBP_MMR6
    186587U,	// SDBBP_R6
    134234180U,	// SDC1
    134234180U,	// SDC164
    134234180U,	// SDC1_D64_MMR6
    134234180U,	// SDC1_MM
    134234380U,	// SDC2
    134234380U,	// SDC2_MMR6
    134234380U,	// SDC2_R6
    134234465U,	// SDC3
    25975U,	// SDIV
    25975U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    134240173U,	// SDL
    134243761U,	// SDMacro
    134240714U,	// SDR
    3506454661U,	// SDXC1
    3506454661U,	// SDXC164
    134238195U,	// SD_MM64R6
    268459553U,	// SDivMacro
    17894U,	// SEB
    17894U,	// SEB64
    17894U,	// SEB_MM
    17894U,	// SEB_MMR6
    21618U,	// SEH
    21618U,	// SEH64
    21618U,	// SEH_MM
    21618U,	// SEH_MMR6
    268461365U,	// SELEQZ
    268461365U,	// SELEQZ64
    268455849U,	// SELEQZ_D
    268455849U,	// SELEQZ_D_MMR6
    268461365U,	// SELEQZ_MMR6
    268459171U,	// SELEQZ_S
    268459171U,	// SELEQZ_S_MMR6
    268461338U,	// SELNEZ
    268461338U,	// SELNEZ64
    268455832U,	// SELNEZ_D
    268455832U,	// SELNEZ_D_MMR6
    268461338U,	// SELNEZ_MMR6
    268459161U,	// SELNEZ_S
    268459161U,	// SELNEZ_S_MMR6
    285231859U,	// SEL_D
    285231859U,	// SEL_D_MMR6
    285236038U,	// SEL_S
    285236038U,	// SEL_S_MMR6
    268458356U,	// SEQ
    268461507U,	// SEQIMacro
    268461507U,	// SEQMacro
    268457724U,	// SEQi
    134239905U,	// SH
    134234544U,	// SH16_MM
    134234544U,	// SH16_MMR6
    134239905U,	// SH64
    134238251U,	// SHE
    134238251U,	// SHE_MM
    134238251U,	// SHE_MMR6
    268452619U,	// SHF_B
    268456179U,	// SHF_H
    268459852U,	// SHF_W
    22724U,	// SHILO
    24116U,	// SHILOV
    24116U,	// SHILOV_MM
    22724U,	// SHILO_MM
    268457449U,	// SHLLV_PH
    268457449U,	// SHLLV_PH_MM
    268453675U,	// SHLLV_QB
    268453675U,	// SHLLV_QB_MM
    268457386U,	// SHLLV_S_PH
    268457386U,	// SHLLV_S_PH_MM
    268460762U,	// SHLLV_S_W
    268460762U,	// SHLLV_S_W_MM
    268457177U,	// SHLL_PH
    268457177U,	// SHLL_PH_MM
    268453462U,	// SHLL_QB
    268453462U,	// SHLL_QB_MM
    268457299U,	// SHLL_S_PH
    268457299U,	// SHLL_S_PH_MM
    268460602U,	// SHLL_S_W
    268460602U,	// SHLL_S_W_MM
    268457439U,	// SHRAV_PH
    268457439U,	// SHRAV_PH_MM
    268453665U,	// SHRAV_QB
    268453665U,	// SHRAV_QB_MMR2
    268457287U,	// SHRAV_R_PH
    268457287U,	// SHRAV_R_PH_MM
    268453563U,	// SHRAV_R_QB
    268453563U,	// SHRAV_R_QB_MMR2
    268460357U,	// SHRAV_R_W
    268460357U,	// SHRAV_R_W_MM
    268457084U,	// SHRA_PH
    268457084U,	// SHRA_PH_MM
    268453385U,	// SHRA_QB
    268453385U,	// SHRA_QB_MMR2
    268457252U,	// SHRA_R_PH
    268457252U,	// SHRA_R_PH_MM
    268453528U,	// SHRA_R_QB
    268453528U,	// SHRA_R_QB_MMR2
    268460315U,	// SHRA_R_W
    268460315U,	// SHRA_R_W_MM
    268457469U,	// SHRLV_PH
    268457469U,	// SHRLV_PH_MMR2
    268453695U,	// SHRLV_QB
    268453695U,	// SHRLV_QB_MM
    268457195U,	// SHRL_PH
    268457195U,	// SHRL_PH_MMR2
    268453480U,	// SHRL_QB
    268453480U,	// SHRL_QB_MM
    134239905U,	// SH_MM
    134239905U,	// SH_MMR6
    1627407138U,	// SLDI_B
    1627408962U,	// SLDI_D
    1627410698U,	// SLDI_H
    1627414452U,	// SLDI_W
    1627407080U,	// SLD_B
    1627408669U,	// SLD_D
    1627410640U,	// SLD_H
    1627414229U,	// SLD_W
    268458015U,	// SLL
    268452301U,	// SLL16_MM
    268452301U,	// SLL16_MMR6
    4026554399U,	// SLL64_32
    4026554399U,	// SLL64_64
    268452676U,	// SLLI_B
    268454483U,	// SLLI_D
    268456219U,	// SLLI_H
    268459973U,	// SLLI_W
    268459559U,	// SLLV
    268459559U,	// SLLV_MM
    268452825U,	// SLL_B
    268454667U,	// SLL_D
    268456335U,	// SLL_H
    268458015U,	// SLL_MM
    268458015U,	// SLL_MMR6
    268460115U,	// SLL_W
    268459258U,	// SLT
    268459258U,	// SLT64
    268459258U,	// SLT_MM
    268457748U,	// SLTi
    268457748U,	// SLTi64
    268457748U,	// SLTi_MM
    268459385U,	// SLTiu
    268459385U,	// SLTiu64
    268459385U,	// SLTiu_MM
    268459433U,	// SLTu
    268459433U,	// SLTu64
    268459433U,	// SLTu_MM
    268456011U,	// SNE
    268457669U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    1610630043U,	// SPLATI_B
    1610631834U,	// SPLATI_D
    1610633570U,	// SPLATI_H
    1610637324U,	// SPLATI_W
    1610630358U,	// SPLAT_B
    1610632547U,	// SPLAT_D
    1610634018U,	// SPLAT_H
    1610638116U,	// SPLAT_W
    19969U,	// SQRT_D_MMR6
    23616U,	// SQRT_S_MMR6
    268452497U,	// SRA
    268452634U,	// SRAI_B
    268454458U,	// SRAI_D
    268456194U,	// SRAI_H
    268459948U,	// SRAI_W
    268452710U,	// SRARI_B
    268454517U,	// SRARI_D
    268456253U,	// SRARI_H
    268460007U,	// SRARI_W
    268452863U,	// SRAR_B
    268454906U,	// SRAR_D
    268456450U,	// SRAR_H
    268460379U,	// SRAR_W
    268459538U,	// SRAV
    268459538U,	// SRAV_MM
    268452561U,	// SRA_B
    268454090U,	// SRA_D
    268456121U,	// SRA_H
    268452497U,	// SRA_MM
    268459667U,	// SRA_W
    268458033U,	// SRL
    268452308U,	// SRL16_MM
    268452308U,	// SRL16_MMR6
    268452684U,	// SRLI_B
    268454491U,	// SRLI_D
    268456227U,	// SRLI_H
    268459981U,	// SRLI_W
    268452728U,	// SRLRI_B
    268454535U,	// SRLRI_D
    268456271U,	// SRLRI_H
    268460025U,	// SRLRI_W
    268452879U,	// SRLR_B
    268454922U,	// SRLR_D
    268456466U,	// SRLR_H
    268460395U,	// SRLR_W
    268459566U,	// SRLV
    268459566U,	// SRLV_MM
    268452832U,	// SRL_B
    268454692U,	// SRL_D
    268456342U,	// SRL_H
    268458033U,	// SRL_MM
    268460140U,	// SRL_W
    9954U,	// SSNOP
    9954U,	// SSNOP_MM
    9954U,	// SSNOP_MMR6
    134234119U,	// STORE_ACC128
    134234119U,	// STORE_ACC64
    134234119U,	// STORE_ACC64DSP
    134240543U,	// STORE_CCOND_DSP
    134235385U,	// ST_B
    134237715U,	// ST_D
    0U,	// ST_F16
    134239045U,	// ST_H
    134243205U,	// ST_W
    268453724U,	// SUB
    268457148U,	// SUBQH_PH
    268457148U,	// SUBQH_PH_MMR2
    268457263U,	// SUBQH_R_PH
    268457263U,	// SUBQH_R_PH_MMR2
    268460325U,	// SUBQH_R_W
    268460325U,	// SUBQH_R_W_MMR2
    268459930U,	// SUBQH_W
    268459930U,	// SUBQH_W_MMR2
    268457223U,	// SUBQ_PH
    268457223U,	// SUBQ_PH_MM
    268457320U,	// SUBQ_S_PH
    268457320U,	// SUBQ_S_PH_MM
    268460631U,	// SUBQ_S_W
    268460631U,	// SUBQ_S_W_MM
    268453235U,	// SUBSUS_U_B
    268455637U,	// SUBSUS_U_D
    268456947U,	// SUBSUS_U_H
    268461119U,	// SUBSUS_U_W
    268453038U,	// SUBSUU_S_B
    268455210U,	// SUBSUU_S_D
    268456687U,	// SUBSUU_S_H
    268460741U,	// SUBSUU_S_W
    268453000U,	// SUBS_S_B
    268455150U,	// SUBS_S_D
    268456649U,	// SUBS_S_H
    268460681U,	// SUBS_S_W
    268453215U,	// SUBS_U_B
    268455617U,	// SUBS_U_D
    268456927U,	// SUBS_U_H
    268461099U,	// SUBS_U_W
    268452374U,	// SUBU16_MM
    268452374U,	// SUBU16_MMR6
    268453433U,	// SUBUH_QB
    268453433U,	// SUBUH_QB_MMR2
    268453539U,	// SUBUH_R_QB
    268453539U,	// SUBUH_R_QB_MMR2
    268459298U,	// SUBU_MMR6
    268457421U,	// SUBU_PH
    268457421U,	// SUBU_PH_MMR2
    268453647U,	// SUBU_QB
    268453647U,	// SUBU_QB_MM
    268457364U,	// SUBU_S_PH
    268457364U,	// SUBU_S_PH_MMR2
    268453586U,	// SUBU_S_QB
    268453586U,	// SUBU_S_QB_MM
    268452782U,	// SUBVI_B
    268454573U,	// SUBVI_D
    268456309U,	// SUBVI_H
    268460063U,	// SUBVI_W
    268453294U,	// SUBV_B
    268455708U,	// SUBV_D
    268457006U,	// SUBV_H
    268461200U,	// SUBV_W
    268453724U,	// SUB_MM
    268453724U,	// SUB_MMR6
    268459298U,	// SUBu
    268459298U,	// SUBu_MM
    3506454675U,	// SUXC1
    3506454675U,	// SUXC164
    3506454675U,	// SUXC1_MM
    134243559U,	// SW
    134234675U,	// SW16_MM
    134234675U,	// SW16_MMR6
    134243559U,	// SW64
    134234232U,	// SWC1
    134234232U,	// SWC1_MM
    134234432U,	// SWC2
    134234432U,	// SWC2_MMR6
    134234432U,	// SWC2_R6
    134234477U,	// SWC3
    134238328U,	// SWE
    134238328U,	// SWE_MM
    134238328U,	// SWE_MMR6
    134240368U,	// SWL
    134240368U,	// SWL64
    134238272U,	// SWLE
    134238272U,	// SWLE_MM
    134240368U,	// SWL_MM
    3817954U,	// SWM16_MM
    3817954U,	// SWM16_MMR6
    3817718U,	// SWM32_MM
    3823773U,	// SWM_MM
    170346U,	// SWP_MM
    170346U,	// SWP_MMR6
    134240836U,	// SWR
    134240836U,	// SWR64
    134238299U,	// SWRE
    134238299U,	// SWRE_MM
    134240836U,	// SWR_MM
    134243559U,	// SWSP_MM
    134243559U,	// SWSP_MMR6
    3506454689U,	// SWXC1
    3506454689U,	// SWXC1_MM
    134243559U,	// SW_MM
    134243559U,	// SW_MMR6
    206239U,	// SYNC
    218795U,	// SYNCI
    218795U,	// SYNCI_MM
    218795U,	// SYNCI_MMR6
    206239U,	// SYNC_MM
    198602U,	// SYNC_MMR6
    186371U,	// SYSCALL
    595971U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    134235989U,	// SbRxRyOffMemX16
    550230U,	// SebRx16
    550242U,	// SehRx16
    4695343U,	// SelBeqZ
    4695316U,	// SelBneZ
    176396537U,	// SelTBteqZCmp
    176396022U,	// SelTBteqZCmpi
    176397562U,	// SelTBteqZSlt
    176396052U,	// SelTBteqZSlti
    176397689U,	// SelTBteqZSltiu
    176397737U,	// SelTBteqZSltu
    444831993U,	// SelTBtneZCmp
    444831478U,	// SelTBtneZCmpi
    444833018U,	// SelTBtneZSlt
    444831508U,	// SelTBtneZSlti
    444833145U,	// SelTBtneZSltiu
    444833193U,	// SelTBtneZSltu
    134239905U,	// ShRxRyOffMemX16
    268458015U,	// SllX16
    16801319U,	// SllvRxRy16
    184851706U,	// SltCCRxRy16
    23802U,	// SltRxRy16
    184850196U,	// SltiCCRxImmX16
    1879070484U,	// SltiRxImm16
    22292U,	// SltiRxImmX16
    184851833U,	// SltiuCCRxImmX16
    1879072121U,	// SltiuRxImm16
    23929U,	// SltiuRxImmX16
    184851881U,	// SltuCCRxRy16
    23977U,	// SltuRxRy16
    184851881U,	// SltuRxRyRz16
    268452497U,	// SraX16
    16801298U,	// SravRxRy16
    268458033U,	// SrlX16
    16801326U,	// SrlvRxRy16
    268459298U,	// SubuRxRyRz16
    134243559U,	// SwRxRyOffMemX16
    134243559U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    268458361U,	// TEQ
    22274U,	// TEQI
    22274U,	// TEQI_MM
    268458361U,	// TEQ_MM
    268455962U,	// TGE
    22207U,	// TGEI
    23922U,	// TGEIU
    23922U,	// TGEIU_MM
    22207U,	// TGEI_MM
    268459345U,	// TGEU
    268459345U,	// TGEU_MM
    268455962U,	// TGE_MM
    9982U,	// TLBINV
    9931U,	// TLBINVF
    9931U,	// TLBINVF_MMR6
    9982U,	// TLBINV_MMR6
    9949U,	// TLBP
    9949U,	// TLBP_MM
    9960U,	// TLBR
    9960U,	// TLBR_MM
    9939U,	// TLBWI
    9939U,	// TLBWI_MM
    9965U,	// TLBWR
    9965U,	// TLBWR_MM
    268459263U,	// TLT
    22298U,	// TLTI
    23936U,	// TLTIU_MM
    22298U,	// TLTI_MM
    268459439U,	// TLTU
    268459439U,	// TLTU_MM
    268459263U,	// TLT_MM
    268456016U,	// TNE
    22219U,	// TNEI
    22219U,	// TNEI_MM
    268456016U,	// TNE_MM
    0U,	// TRAP
    19135U,	// TRUNC_L_D64
    19135U,	// TRUNC_L_D_MMR6
    23314U,	// TRUNC_L_S
    23314U,	// TRUNC_L_S_MMR6
    20310U,	// TRUNC_W_D32
    20310U,	// TRUNC_W_D64
    20310U,	// TRUNC_W_D_MMR6
    20310U,	// TRUNC_W_MM
    23646U,	// TRUNC_W_S
    23646U,	// TRUNC_W_S_MM
    23646U,	// TRUNC_W_S_MMR6
    23936U,	// TTLTIU
    25961U,	// UDIV
    25961U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    268459461U,	// UDivMacro
    134239351U,	// Ulh
    134241629U,	// Ulhu
    134243553U,	// Ulw
    134239904U,	// Ush
    134243558U,	// Usw
    268459399U,	// V3MULU
    268451877U,	// VMM0
    268459414U,	// VMULU
    285229834U,	// VSHF_B
    285231642U,	// VSHF_D
    285233394U,	// VSHF_H
    285237067U,	// VSHF_W
    9977U,	// WAIT
    597231U,	// WAIT_MM
    597231U,	// WAIT_MMR6
    41965879U,	// WRDSP
    159406391U,	// WRDSP_MM
    23081U,	// WRPGPR_MMR6
    21612U,	// WSBH
    21612U,	// WSBH_MM
    21612U,	// WSBH_MMR6
    268458524U,	// XOR
    9224696U,	// XOR16_MM
    9224696U,	// XOR16_MMR6
    268458524U,	// XOR64
    268452745U,	// XORI_B
    268457736U,	// XORI_MMR6
    268458524U,	// XOR_MM
    268458524U,	// XOR_MMR6
    268459502U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    268457736U,	// XORi
    268457736U,	// XORi64
    268457736U,	// XORi_MM
    16800284U,	// XorRxRxRy16
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_BR
    0U,	// ABSMacro
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_PH_MM
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_QB_MMR2
    0U,	// ABSQ_S_W
    0U,	// ABSQ_S_W_MM
    0U,	// ABS_D_MMR6
    0U,	// ABS_S_MMR6
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_PH_MMR2
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_PH_MMR2
    0U,	// ADDQH_R_W
    0U,	// ADDQH_R_W_MMR2
    0U,	// ADDQH_W
    0U,	// ADDQH_W_MMR2
    0U,	// ADDQ_PH
    0U,	// ADDQ_PH_MM
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_PH_MM
    0U,	// ADDQ_S_W
    0U,	// ADDQ_S_W_MM
    0U,	// ADDSC
    0U,	// ADDSC_MM
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDU16_MMR6
    0U,	// ADDUH_QB
    0U,	// ADDUH_QB_MMR2
    0U,	// ADDUH_R_QB
    0U,	// ADDUH_R_QB_MMR2
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_PH_MMR2
    0U,	// ADDU_QB
    0U,	// ADDU_QB_MM
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_PH_MMR2
    0U,	// ADDU_S_QB
    0U,	// ADDU_S_QB_MM
    2U,	// ADDVI_B
    2U,	// ADDVI_D
    2U,	// ADDVI_H
    2U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADDWC_MM
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    64U,	// ALIGN
    64U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND16_MMR6
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI16_MMR6
    4U,	// ANDI_B
    6U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    6U,	// ANDi
    6U,	// ANDi64
    6U,	// ANDi_MM
    2U,	// APPEND
    2U,	// APPEND_MMR2
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    6U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    6U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    8U,	// BALIGN
    8U,	// BALIGN_MMR2
    0U,	// BAL_BR
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC16_MMR6
    0U,	// BC1EQZ
    0U,	// BC1EQZC_MMR6
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1NEZC_MMR6
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2EQZC_MMR6
    0U,	// BC2NEZ
    0U,	// BC2NEZC_MMR6
    10U,	// BCLRI_B
    12U,	// BCLRI_D
    14U,	// BCLRI_H
    2U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQC64
    0U,	// BEQC_MMR6
    0U,	// BEQL
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC16_MMR6
    0U,	// BEQZC64
    0U,	// BEQZC_MM
    0U,	// BEQZC_MMR6
    0U,	// BEQ_MM
    0U,	// BGE
    0U,	// BGEC
    0U,	// BGEC64
    0U,	// BGEC_MMR6
    0U,	// BGEImmMacro
    0U,	// BGEL
    0U,	// BGELImmMacro
    0U,	// BGEU
    0U,	// BGEUC
    0U,	// BGEUC64
    0U,	// BGEUC_MMR6
    0U,	// BGEUImmMacro
    0U,	// BGEUL
    0U,	// BGEULImmMacro
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZC64
    0U,	// BGEZC_MMR6
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGT
    0U,	// BGTImmMacro
    0U,	// BGTL
    0U,	// BGTLImmMacro
    0U,	// BGTU
    0U,	// BGTUImmMacro
    0U,	// BGTUL
    0U,	// BGTULImmMacro
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZC64
    0U,	// BGTZC_MMR6
    0U,	// BGTZL
    0U,	// BGTZ_MM
    16U,	// BINSLI_B
    18U,	// BINSLI_D
    20U,	// BINSLI_H
    22U,	// BINSLI_W
    24U,	// BINSL_B
    24U,	// BINSL_D
    24U,	// BINSL_H
    24U,	// BINSL_W
    16U,	// BINSRI_B
    18U,	// BINSRI_D
    20U,	// BINSRI_H
    22U,	// BINSRI_W
    24U,	// BINSR_B
    24U,	// BINSR_D
    24U,	// BINSR_H
    24U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITREV_MM
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLE
    0U,	// BLEImmMacro
    0U,	// BLEL
    0U,	// BLELImmMacro
    0U,	// BLEU
    0U,	// BLEUImmMacro
    0U,	// BLEUL
    0U,	// BLEULImmMacro
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZC64
    0U,	// BLEZC_MMR6
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLT
    0U,	// BLTC
    0U,	// BLTC64
    0U,	// BLTC_MMR6
    0U,	// BLTImmMacro
    0U,	// BLTL
    0U,	// BLTLImmMacro
    0U,	// BLTU
    0U,	// BLTUC
    0U,	// BLTUC64
    0U,	// BLTUC_MMR6
    0U,	// BLTUImmMacro
    0U,	// BLTUL
    0U,	// BLTULImmMacro
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZC64
    0U,	// BLTZC_MMR6
    0U,	// BLTZL
    0U,	// BLTZ_MM
    26U,	// BMNZI_B
    24U,	// BMNZ_V
    26U,	// BMZI_B
    24U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEC64
    0U,	// BNEC_MMR6
    10U,	// BNEGI_B
    12U,	// BNEGI_D
    14U,	// BNEGI_H
    2U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC16_MMR6
    0U,	// BNEZC64
    0U,	// BNEZC_MM
    0U,	// BNEZC_MMR6
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNVC_MMR6
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BOVC_MMR6
    0U,	// BPOSGE32
    0U,	// BPOSGE32C_MMR3
    0U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK16_MMR6
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    26U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    24U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    10U,	// BSETI_B
    12U,	// BSETI_D
    14U,	// BSETI_H
    2U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// B_MMR6_Pseudo
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BneImm
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHEE
    0U,	// CACHEE_MM
    0U,	// CACHEE_MMR6
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_D_MMR6
    0U,	// CEIL_L_S
    0U,	// CEIL_L_S_MMR6
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_D_MMR6
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEIL_W_S_MMR6
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFC2_MM
    0U,	// CFCMSA
    578U,	// CINS
    578U,	// CINS32
    0U,	// CLASS_D
    0U,	// CLASS_D_MMR6
    0U,	// CLASS_S
    0U,	// CLASS_S_MMR6
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    2U,	// CLEI_U_B
    2U,	// CLEI_U_D
    2U,	// CLEI_U_H
    2U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    2U,	// CLTI_U_B
    2U,	// CLTI_U_D
    2U,	// CLTI_U_H
    2U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_EQ_QB_MMR2
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LE_QB_MMR2
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGDU_LT_QB_MMR2
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_EQ_QB_MM
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LE_QB_MM
    0U,	// CMPGU_LT_QB
    0U,	// CMPGU_LT_QB_MM
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_EQ_QB_MM
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LE_QB_MM
    0U,	// CMPU_LT_QB
    0U,	// CMPU_LT_QB_MM
    0U,	// CMP_AF_D_MMR6
    0U,	// CMP_AF_S_MMR6
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_D_MMR6
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_PH_MM
    0U,	// CMP_EQ_S
    0U,	// CMP_EQ_S_MMR6
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_D_MMR6
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_PH_MM
    0U,	// CMP_LE_S
    0U,	// CMP_LE_S_MMR6
    0U,	// CMP_LT_D
    0U,	// CMP_LT_D_MMR6
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_PH_MM
    0U,	// CMP_LT_S
    0U,	// CMP_LT_S_MMR6
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_D_MMR6
    0U,	// CMP_SAF_S
    0U,	// CMP_SAF_S_MMR6
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_D_MMR6
    0U,	// CMP_SEQ_S
    0U,	// CMP_SEQ_S_MMR6
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_D_MMR6
    0U,	// CMP_SLE_S
    0U,	// CMP_SLE_S_MMR6
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_D_MMR6
    0U,	// CMP_SLT_S
    0U,	// CMP_SLT_S_MMR6
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_D_MMR6
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SUEQ_S_MMR6
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_D_MMR6
    0U,	// CMP_SULE_S
    0U,	// CMP_SULE_S_MMR6
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_D_MMR6
    0U,	// CMP_SULT_S
    0U,	// CMP_SULT_S_MMR6
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_D_MMR6
    0U,	// CMP_SUN_S
    0U,	// CMP_SUN_S_MMR6
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_D_MMR6
    0U,	// CMP_UEQ_S
    0U,	// CMP_UEQ_S_MMR6
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_D_MMR6
    0U,	// CMP_ULE_S
    0U,	// CMP_ULE_S_MMR6
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_D_MMR6
    0U,	// CMP_ULT_S
    0U,	// CMP_ULT_S_MMR6
    0U,	// CMP_UN_D
    0U,	// CMP_UN_D_MMR6
    0U,	// CMP_UN_S
    0U,	// CMP_UN_S_MMR6
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    142U,	// COPY_S_B
    28U,	// COPY_S_D
    138U,	// COPY_S_H
    136U,	// COPY_S_W
    142U,	// COPY_U_B
    138U,	// COPY_U_H
    136U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTC2_MM
    0U,	// CTCMSA
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_L_MMR6
    0U,	// CVT_D_S_MM
    0U,	// CVT_D_S_MMR6
    0U,	// CVT_D_W_MMR6
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_D_MMR6
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_L_S_MMR6
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_D_MMR6
    0U,	// CVT_S_L
    0U,	// CVT_S_L_MMR6
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_S_W_MMR6
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_D_MMR6
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// CVT_W_S_MMR6
    0U,	// C_EQ_D32
    0U,	// C_EQ_D32_MM
    0U,	// C_EQ_D64
    0U,	// C_EQ_D64_MM
    0U,	// C_EQ_S
    0U,	// C_EQ_S_MM
    0U,	// C_F_D32
    0U,	// C_F_D32_MM
    0U,	// C_F_D64
    0U,	// C_F_D64_MM
    0U,	// C_F_S
    0U,	// C_F_S_MM
    0U,	// C_LE_D32
    0U,	// C_LE_D32_MM
    0U,	// C_LE_D64
    0U,	// C_LE_D64_MM
    0U,	// C_LE_S
    0U,	// C_LE_S_MM
    0U,	// C_LT_D32
    0U,	// C_LT_D32_MM
    0U,	// C_LT_D64
    0U,	// C_LT_D64_MM
    0U,	// C_LT_S
    0U,	// C_LT_S_MM
    0U,	// C_NGE_D32
    0U,	// C_NGE_D32_MM
    0U,	// C_NGE_D64
    0U,	// C_NGE_D64_MM
    0U,	// C_NGE_S
    0U,	// C_NGE_S_MM
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D32_MM
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_D64_MM
    0U,	// C_NGLE_S
    0U,	// C_NGLE_S_MM
    0U,	// C_NGL_D32
    0U,	// C_NGL_D32_MM
    0U,	// C_NGL_D64
    0U,	// C_NGL_D64_MM
    0U,	// C_NGL_S
    0U,	// C_NGL_S_MM
    0U,	// C_NGT_D32
    0U,	// C_NGT_D32_MM
    0U,	// C_NGT_D64
    0U,	// C_NGT_D64_MM
    0U,	// C_NGT_S
    0U,	// C_NGT_S_MM
    0U,	// C_OLE_D32
    0U,	// C_OLE_D32_MM
    0U,	// C_OLE_D64
    0U,	// C_OLE_D64_MM
    0U,	// C_OLE_S
    0U,	// C_OLE_S_MM
    0U,	// C_OLT_D32
    0U,	// C_OLT_D32_MM
    0U,	// C_OLT_D64
    0U,	// C_OLT_D64_MM
    0U,	// C_OLT_S
    0U,	// C_OLT_S_MM
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D32_MM
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_D64_MM
    0U,	// C_SEQ_S
    0U,	// C_SEQ_S_MM
    0U,	// C_SF_D32
    0U,	// C_SF_D32_MM
    0U,	// C_SF_D64
    0U,	// C_SF_D64_MM
    0U,	// C_SF_S
    0U,	// C_SF_S_MM
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D32_MM
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_D64_MM
    0U,	// C_UEQ_S
    0U,	// C_UEQ_S_MM
    0U,	// C_ULE_D32
    0U,	// C_ULE_D32_MM
    0U,	// C_ULE_D64
    0U,	// C_ULE_D64_MM
    0U,	// C_ULE_S
    0U,	// C_ULE_S_MM
    0U,	// C_ULT_D32
    0U,	// C_ULT_D32_MM
    0U,	// C_ULT_D64
    0U,	// C_ULT_D64_MM
    0U,	// C_ULT_S
    0U,	// C_ULT_S_MM
    0U,	// C_UN_D32
    0U,	// C_UN_D32_MM
    0U,	// C_UN_D64
    0U,	// C_UN_D64_MM
    0U,	// C_UN_S
    0U,	// C_UN_S_MM
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDIU_MM64R6
    0U,	// DADDU_MM64R6
    0U,	// DADD_MM64R6
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    6U,	// DAHI
    0U,	// DAHI_MM64R6
    1088U,	// DALIGN
    1088U,	// DALIGN_MM64R6
    6U,	// DATI
    0U,	// DATI_MM64R6
    6U,	// DAUI
    6U,	// DAUI_MM64R6
    0U,	// DBITSWAP
    0U,	// DBITSWAP_MM64R6
    0U,	// DCLO
    0U,	// DCLO_MM64R6
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_MM64R6
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DDIVU_MM64R6
    0U,	// DDIV_MM64R6
    0U,	// DERET
    0U,	// DERET_MM
    0U,	// DERET_MMR6
    1602U,	// DEXT
    2114U,	// DEXTM
    2114U,	// DEXTM_MM64R6
    222U,	// DEXTU
    222U,	// DEXTU_MM64R6
    1602U,	// DEXT_MM64R6
    0U,	// DI
    2636U,	// DINS
    2626U,	// DINSM
    3138U,	// DINSM_MM64R6
    286U,	// DINSU
    286U,	// DINSU_MM64R6
    2626U,	// DINS_MM64R6
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    0U,	// DI_MMR6
    3648U,	// DLSA
    0U,	// DLSA_MM64R6
    3648U,	// DLSA_R6
    10U,	// DMFC0
    10U,	// DMFC0_MM64R6
    0U,	// DMFC1
    0U,	// DMFC1_MM64R6
    10U,	// DMFC2
    0U,	// DMFC2_MM64R6
    0U,	// DMFC2_OCTEON
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMODU_MM64R6
    0U,	// DMOD_MM64R6
    0U,	// DMTC0
    0U,	// DMTC0_MM64R6
    0U,	// DMTC1
    0U,	// DMTC1_MM64R6
    0U,	// DMTC2
    0U,	// DMTC2_MM64R6
    0U,	// DMTC2_OCTEON
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUHU_MM64R6
    0U,	// DMUH_MM64R6
    0U,	// DMUL
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMULU_MM64R6
    0U,	// DMUL_MM64R6
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    24U,	// DPADD_S_D
    24U,	// DPADD_S_H
    24U,	// DPADD_S_W
    24U,	// DPADD_U_D
    24U,	// DPADD_U_H
    24U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_MMR2
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_MMR2
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_MM
    0U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_MM
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_MM
    0U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_MM
    0U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_MMR2
    0U,	// DPA_W_PH
    0U,	// DPA_W_PH_MMR2
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_MMR2
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_MMR2
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_MM
    0U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_MM
    24U,	// DPSUB_S_D
    24U,	// DPSUB_S_H
    24U,	// DPSUB_S_W
    24U,	// DPSUB_U_D
    24U,	// DPSUB_U_H
    24U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_MM
    0U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_MM
    0U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_MMR2
    0U,	// DPS_W_PH
    0U,	// DPS_W_PH_MMR2
    0U,	// DROL
    0U,	// DROLImm
    0U,	// DROR
    0U,	// DRORImm
    12U,	// DROTR
    2U,	// DROTR32
    2U,	// DROTR32_MM64R6
    0U,	// DROTRV
    0U,	// DROTRV_MM64R6
    12U,	// DROTR_MM64R6
    0U,	// DSBH
    0U,	// DSBH_MM64R6
    0U,	// DSDIV
    0U,	// DSDivMacro
    0U,	// DSHD
    0U,	// DSHD_MM64R6
    12U,	// DSLL
    2U,	// DSLL32
    2U,	// DSLL32_MM64R6
    0U,	// DSLL64_32
    0U,	// DSLLV
    0U,	// DSLLV_MM64R6
    12U,	// DSLL_MM64R6
    12U,	// DSRA
    2U,	// DSRA32
    2U,	// DSRA32_MM64R6
    0U,	// DSRAV
    0U,	// DSRAV_MM64R6
    12U,	// DSRA_MM64R6
    12U,	// DSRL
    2U,	// DSRL32
    2U,	// DSRL32_MM64R6
    0U,	// DSRLV
    0U,	// DSRLV_MM64R6
    12U,	// DSRL_MM64R6
    0U,	// DSUB
    0U,	// DSUBU_MM64R6
    0U,	// DSUB_MM64R6
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DUDivMacro
    0U,	// DVP
    0U,	// DVP_MMR6
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    0U,	// ERet
    0U,	// EVP
    0U,	// EVP_MMR6
    1602U,	// EXT
    2U,	// EXTP
    2U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPDPV_MM
    2U,	// EXTPDP_MM
    0U,	// EXTPV
    0U,	// EXTPV_MM
    2U,	// EXTP_MM
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_RS_W_MM
    0U,	// EXTRV_R_W
    0U,	// EXTRV_R_W_MM
    0U,	// EXTRV_S_H
    0U,	// EXTRV_S_H_MM
    0U,	// EXTRV_W
    0U,	// EXTRV_W_MM
    2U,	// EXTR_RS_W
    2U,	// EXTR_RS_W_MM
    2U,	// EXTR_R_W
    2U,	// EXTR_R_W_MM
    2U,	// EXTR_S_H
    2U,	// EXTR_S_H_MM
    2U,	// EXTR_W
    2U,	// EXTR_W_MM
    578U,	// EXTS
    578U,	// EXTS32
    1602U,	// EXT_MM
    1602U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    32U,	// FADD_D_MMR6
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    32U,	// FADD_S_MMR6
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    32U,	// FDIV_D_MMR6
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    32U,	// FDIV_S_MMR6
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_D_MMR6
    0U,	// FLOOR_L_S
    0U,	// FLOOR_L_S_MMR6
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_D_MMR6
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FLOOR_W_S_MMR6
    24U,	// FMADD_D
    24U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_D_MMR6
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMOV_S_MMR6
    24U,	// FMSUB_D
    24U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    32U,	// FMUL_D_MMR6
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    32U,	// FMUL_S_MMR6
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_D_MMR6
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FNEG_S_MMR6
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    32U,	// FSUB_D_MMR6
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    32U,	// FSUB_S_MMR6
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    2626U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    0U,	// INSV_MM
    2626U,	// INS_MM
    2626U,	// INS_MMR6
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRC16_MMR6
    0U,	// JALRC_HB_MMR6
    0U,	// JALRC_MMR6
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC64
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC64
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JRC16_MMR6
    0U,	// JRCADDIUSP_MMR6
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBE
    0U,	// LBE_MM
    0U,	// LBE_MMR6
    0U,	// LBU16_MM
    0U,	// LBUE_MMR6
    0U,	// LBUX
    0U,	// LBUX_MM
    0U,	// LBU_MMR6
    0U,	// LB_MM
    0U,	// LB_MMR6
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBuE
    0U,	// LBuE_MM
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_D64_MMR6
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_MMR6
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDMacro
    0U,	// LDPC
    0U,	// LDPC_MM64R6
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_F16
    0U,	// LD_H
    0U,	// LD_MM64R6
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHE
    0U,	// LHE_MM
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LHX_MM
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHuE
    0U,	// LHuE_MM
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LI16_MMR6
    0U,	// LL
    0U,	// LL64
    0U,	// LL64_R6
    0U,	// LLD
    0U,	// LLD_MM64R6
    0U,	// LLD_R6
    0U,	// LLE
    0U,	// LLE_MM
    0U,	// LLE_MMR6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    3648U,	// LSA
    0U,	// LSA_MMR6
    3648U,	// LSA_R6
    0U,	// LUI_MMR6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_MMR6
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWE
    0U,	// LWE_MM
    0U,	// LWE_MMR6
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWLE
    0U,	// LWLE_MM
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM16_MMR6
    0U,	// LWM32_MM
    0U,	// LWM_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWP_MMR6
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWRE
    0U,	// LWRE_MM
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWUPC_MM64R6
    0U,	// LWU_MM
    0U,	// LWU_MM64R6
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LWX_MM
    0U,	// LW_MM
    0U,	// LW_MMR6
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    24U,	// MADDF_D
    24U,	// MADDF_D_MMR6
    24U,	// MADDF_S
    24U,	// MADDF_S_MMR6
    24U,	// MADDR_Q_H
    24U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_DSP_MM
    0U,	// MADDU_MM
    24U,	// MADDV_B
    24U,	// MADDV_D
    24U,	// MADDV_H
    24U,	// MADDV_W
    4160U,	// MADD_D32
    4160U,	// MADD_D32_MM
    4160U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_DSP_MM
    0U,	// MADD_MM
    24U,	// MADD_Q_H
    24U,	// MADD_Q_W
    4160U,	// MADD_S
    4160U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_MM
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_MM
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_MM
    0U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_MM
    0U,	// MAXA_D
    0U,	// MAXA_D_MMR6
    0U,	// MAXA_S
    0U,	// MAXA_S_MMR6
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    2U,	// MAXI_U_B
    2U,	// MAXI_U_D
    2U,	// MAXI_U_H
    2U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_D_MMR6
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_MMR6
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    10U,	// MFC0
    10U,	// MFC0_MMR6
    0U,	// MFC1
    0U,	// MFC1_MM
    0U,	// MFC1_MMR6
    10U,	// MFC2
    0U,	// MFC2_MMR6
    10U,	// MFHC0_MMR6
    0U,	// MFHC1_D32
    0U,	// MFHC1_D32_MMR6
    0U,	// MFHC1_D64
    0U,	// MFHC1_D64_MMR6
    0U,	// MFHC1_MM
    0U,	// MFHC2_MMR6
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_DSP_MM
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_DSP_MM
    0U,	// MFLO_MM
    0U,	// MINA_D
    0U,	// MINA_D_MMR6
    0U,	// MINA_S
    0U,	// MINA_S_MMR6
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    2U,	// MINI_U_B
    2U,	// MINI_U_D
    2U,	// MINI_U_H
    2U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_D_MMR6
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_MMR6
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODSUB_MM
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE16_MMR6
    0U,	// MOVEP_MM
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    0U,	// MSUB
    24U,	// MSUBF_D
    24U,	// MSUBF_D_MMR6
    24U,	// MSUBF_S
    24U,	// MSUBF_S_MMR6
    24U,	// MSUBR_Q_H
    24U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_MM
    0U,	// MSUBU_MM
    24U,	// MSUBV_B
    24U,	// MSUBV_D
    24U,	// MSUBV_H
    24U,	// MSUBV_W
    4160U,	// MSUB_D32
    4160U,	// MSUB_D32_MM
    4160U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_DSP_MM
    0U,	// MSUB_MM
    24U,	// MSUB_Q_H
    24U,	// MSUB_Q_W
    4160U,	// MSUB_S
    4160U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC0_MMR6
    0U,	// MTC1
    0U,	// MTC1_MM
    0U,	// MTC1_MMR6
    0U,	// MTC2
    0U,	// MTC2_MMR6
    0U,	// MTHC0_MMR6
    0U,	// MTHC1_D32
    0U,	// MTHC1_D32_MMR6
    0U,	// MTHC1_D64
    0U,	// MTHC1_D64_MMR6
    0U,	// MTHC1_MM
    0U,	// MTHC2_MMR6
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_DSP_MM
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTHLIP_MM
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_DSP_MM
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHL_MM
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEQ_S_W_PHR_MM
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBL_MM
    0U,	// MULEU_S_PH_QBR
    0U,	// MULEU_S_PH_QBR_MM
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_PH_MM
    0U,	// MULQ_RS_W
    0U,	// MULQ_RS_W_MMR2
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_PH_MMR2
    0U,	// MULQ_S_W
    0U,	// MULQ_S_W_MMR2
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_MM
    0U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_MMR2
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULTU_DSP_MM
    0U,	// MULT_DSP
    0U,	// MULT_DSP_MM
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_PH_MMR2
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// MUL_S_PH_MMR2
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    4160U,	// NMADD_D32
    4160U,	// NMADD_D32_MM
    4160U,	// NMADD_D64
    4160U,	// NMADD_S
    4160U,	// NMADD_S_MM
    4160U,	// NMSUB_D32
    4160U,	// NMSUB_D32_MM
    4160U,	// NMSUB_D64
    4160U,	// NMSUB_S
    4160U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    4U,	// NORI_B
    0U,	// NORImm
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NOT16_MMR6
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR16_MMR6
    0U,	// OR64
    4U,	// ORI_B
    6U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    6U,	// ORi
    6U,	// ORi64
    6U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PACKRL_PH_MM
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PAUSE_MMR6
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_PH_MM
    0U,	// PICK_QB
    0U,	// PICK_QB_MM
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBLA_MM
    0U,	// PRECEQU_PH_QBL_MM
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQU_PH_QBRA_MM
    0U,	// PRECEQU_PH_QBR_MM
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHL_MM
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEQ_W_PHR_MM
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBLA_MM
    0U,	// PRECEU_PH_QBL_MM
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECEU_PH_QBRA_MM
    0U,	// PRECEU_PH_QBR_MM
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQU_S_QB_PH_MM
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_PH_W_MM
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_QB_PH_MM
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECRQ_RS_PH_W_MM
    0U,	// PRECR_QB_PH
    0U,	// PRECR_QB_PH_MMR2
    2U,	// PRECR_SRA_PH_W
    2U,	// PRECR_SRA_PH_W_MMR2
    2U,	// PRECR_SRA_R_PH_W
    2U,	// PRECR_SRA_R_PH_W_MMR2
    0U,	// PREF
    0U,	// PREFE
    0U,	// PREFE_MM
    0U,	// PREFE_MMR6
    0U,	// PREFX_MM
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    2U,	// PREPEND
    2U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoTRUNC_W_D
    0U,	// PseudoTRUNC_W_D32
    0U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RADDU_W_QB_MM
    0U,	// RDDSP
    0U,	// RDDSP_MM
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    10U,	// RDHWR_MMR6
    0U,	// RDPGPR_MMR6
    0U,	// RECIP_D
    0U,	// RECIP_D_MM
    0U,	// RECIP_S
    0U,	// RECIP_S_MM
    0U,	// REPLV_PH
    0U,	// REPLV_PH_MM
    0U,	// REPLV_QB
    0U,	// REPLV_QB_MM
    0U,	// REPL_PH
    0U,	// REPL_PH_MM
    0U,	// REPL_QB
    0U,	// REPL_QB_MM
    0U,	// RINT_D
    0U,	// RINT_D_MMR6
    0U,	// RINT_S
    0U,	// RINT_S_MMR6
    0U,	// ROL
    0U,	// ROLImm
    0U,	// ROR
    0U,	// RORImm
    2U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    2U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_D_MMR6
    0U,	// ROUND_L_S
    0U,	// ROUND_L_S_MMR6
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_D_MMR6
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// ROUND_W_S_MMR6
    0U,	// RSQRT_D
    0U,	// RSQRT_D_MM
    0U,	// RSQRT_S
    0U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    10U,	// SAT_S_B
    12U,	// SAT_S_D
    14U,	// SAT_S_H
    2U,	// SAT_S_W
    10U,	// SAT_U_B
    12U,	// SAT_U_D
    14U,	// SAT_U_H
    2U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB16_MMR6
    0U,	// SB64
    0U,	// SBE
    0U,	// SBE_MM
    0U,	// SBE_MMR6
    0U,	// SB_MM
    0U,	// SB_MMR6
    0U,	// SC
    0U,	// SC64
    0U,	// SC64_R6
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SCE
    0U,	// SCE_MM
    0U,	// SCE_MMR6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP16_MMR6
    0U,	// SDBBP_MM
    0U,	// SDBBP_MMR6
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_D64_MMR6
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_MMR6
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    0U,	// SDL
    0U,	// SDMacro
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SD_MM64R6
    0U,	// SDivMacro
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEB_MMR6
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SEH_MMR6
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_D_MMR6
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELEQZ_S_MMR6
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_D_MMR6
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    0U,	// SELNEZ_S_MMR6
    24U,	// SEL_D
    24U,	// SEL_D_MMR6
    24U,	// SEL_S
    24U,	// SEL_S_MMR6
    0U,	// SEQ
    0U,	// SEQIMacro
    0U,	// SEQMacro
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH16_MMR6
    0U,	// SH64
    0U,	// SHE
    0U,	// SHE_MM
    0U,	// SHE_MMR6
    4U,	// SHF_B
    4U,	// SHF_H
    4U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHILOV_MM
    0U,	// SHILO_MM
    0U,	// SHLLV_PH
    0U,	// SHLLV_PH_MM
    0U,	// SHLLV_QB
    0U,	// SHLLV_QB_MM
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_PH_MM
    0U,	// SHLLV_S_W
    0U,	// SHLLV_S_W_MM
    14U,	// SHLL_PH
    14U,	// SHLL_PH_MM
    10U,	// SHLL_QB
    10U,	// SHLL_QB_MM
    14U,	// SHLL_S_PH
    14U,	// SHLL_S_PH_MM
    2U,	// SHLL_S_W
    2U,	// SHLL_S_W_MM
    0U,	// SHRAV_PH
    0U,	// SHRAV_PH_MM
    0U,	// SHRAV_QB
    0U,	// SHRAV_QB_MMR2
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_PH_MM
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_QB_MMR2
    0U,	// SHRAV_R_W
    0U,	// SHRAV_R_W_MM
    14U,	// SHRA_PH
    14U,	// SHRA_PH_MM
    10U,	// SHRA_QB
    10U,	// SHRA_QB_MMR2
    14U,	// SHRA_R_PH
    14U,	// SHRA_R_PH_MM
    10U,	// SHRA_R_QB
    10U,	// SHRA_R_QB_MMR2
    2U,	// SHRA_R_W
    2U,	// SHRA_R_W_MM
    0U,	// SHRLV_PH
    0U,	// SHRLV_PH_MMR2
    0U,	// SHRLV_QB
    0U,	// SHRLV_QB_MM
    14U,	// SHRL_PH
    14U,	// SHRL_PH_MMR2
    10U,	// SHRL_QB
    10U,	// SHRL_QB_MM
    0U,	// SH_MM
    0U,	// SH_MMR6
    148U,	// SLDI_B
    34U,	// SLDI_D
    144U,	// SLDI_H
    36U,	// SLDI_W
    152U,	// SLD_B
    152U,	// SLD_D
    152U,	// SLD_H
    152U,	// SLD_W
    2U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL16_MMR6
    0U,	// SLL64_32
    0U,	// SLL64_64
    10U,	// SLLI_B
    12U,	// SLLI_D
    14U,	// SLLI_H
    2U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    2U,	// SLL_MM
    2U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    142U,	// SPLATI_B
    28U,	// SPLATI_D
    138U,	// SPLATI_H
    136U,	// SPLATI_W
    128U,	// SPLAT_B
    128U,	// SPLAT_D
    128U,	// SPLAT_H
    128U,	// SPLAT_W
    0U,	// SQRT_D_MMR6
    0U,	// SQRT_S_MMR6
    2U,	// SRA
    10U,	// SRAI_B
    12U,	// SRAI_D
    14U,	// SRAI_H
    2U,	// SRAI_W
    10U,	// SRARI_B
    12U,	// SRARI_D
    14U,	// SRARI_H
    2U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    2U,	// SRA_MM
    0U,	// SRA_W
    2U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRL16_MMR6
    10U,	// SRLI_B
    12U,	// SRLI_D
    14U,	// SRLI_H
    2U,	// SRLI_W
    10U,	// SRLRI_B
    12U,	// SRLRI_D
    14U,	// SRLRI_H
    2U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    2U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// SSNOP_MMR6
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_F16
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_PH_MMR2
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_PH_MMR2
    0U,	// SUBQH_R_W
    0U,	// SUBQH_R_W_MMR2
    0U,	// SUBQH_W
    0U,	// SUBQH_W_MMR2
    0U,	// SUBQ_PH
    0U,	// SUBQ_PH_MM
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_PH_MM
    0U,	// SUBQ_S_W
    0U,	// SUBQ_S_W_MM
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBU16_MMR6
    0U,	// SUBUH_QB
    0U,	// SUBUH_QB_MMR2
    0U,	// SUBUH_R_QB
    0U,	// SUBUH_R_QB_MMR2
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_PH_MMR2
    0U,	// SUBU_QB
    0U,	// SUBU_QB_MM
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_PH_MMR2
    0U,	// SUBU_S_QB
    0U,	// SUBU_S_QB_MM
    2U,	// SUBVI_B
    2U,	// SUBVI_D
    2U,	// SUBVI_H
    2U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW16_MMR6
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_MMR6
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWE
    0U,	// SWE_MM
    0U,	// SWE_MMR6
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWLE
    0U,	// SWLE_MM
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM16_MMR6
    0U,	// SWM32_MM
    0U,	// SWM_MM
    0U,	// SWP_MM
    0U,	// SWP_MMR6
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWRE
    0U,	// SWRE_MM
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWSP_MMR6
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNCI_MM
    0U,	// SYNCI_MMR6
    0U,	// SYNC_MM
    0U,	// SYNC_MMR6
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    1U,	// SelTBteqZCmp
    1U,	// SelTBteqZCmpi
    1U,	// SelTBteqZSlt
    1U,	// SelTBteqZSlti
    1U,	// SelTBteqZSltiu
    1U,	// SelTBteqZSltu
    1U,	// SelTBtneZCmp
    1U,	// SelTBtneZCmpi
    1U,	// SelTBtneZSlt
    1U,	// SelTBtneZSlti
    1U,	// SelTBtneZSltiu
    1U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    2U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    2U,	// SraX16
    0U,	// SravRxRy16
    2U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    38U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    14U,	// TEQ_MM
    38U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    38U,	// TGEU
    14U,	// TGEU_MM
    14U,	// TGE_MM
    0U,	// TLBINV
    0U,	// TLBINVF
    0U,	// TLBINVF_MMR6
    0U,	// TLBINV_MMR6
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    38U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    38U,	// TLTU
    14U,	// TLTU_MM
    14U,	// TLT_MM
    38U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    14U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_D_MMR6
    0U,	// TRUNC_L_S
    0U,	// TRUNC_L_S_MMR6
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_D_MMR6
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TRUNC_W_S_MMR6
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    0U,	// UDivMacro
    0U,	// Ulh
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// Ush
    0U,	// Usw
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    24U,	// VSHF_B
    24U,	// VSHF_D
    24U,	// VSHF_H
    24U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WAIT_MMR6
    0U,	// WRDSP
    0U,	// WRDSP_MM
    0U,	// WRPGPR_MMR6
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// WSBH_MMR6
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR16_MMR6
    0U,	// XOR64
    4U,	// XORI_B
    6U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    6U,	// XORi
    6U,	// XORi64
    6U,	// XORi_MM
    0U,	// XorRxRxRy16
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, PATCHABLE_FUNCTION_EN...
    return;
    break;
  case 1:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, CTC2_MM, DAHI_MM64R6, DATI_MM64R6, DLSA_MM6...
    printOperand(MI, 1, O);
    O << ", ";
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, MTHC1_D32, MTHC1_D32_MMR6, MTHC1_D64, ...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 4:
    // BREAK, BREAK_MM, BREAK_MMR6, SDBBP_MM, SYSCALL_MM, WAIT_MM, WAIT_MMR6
    printUImm<10>(MI, 0, O);
    break;
  case 5:
    // BREAK16_MM, BREAK16_MMR6, SDBBP16_MM, SDBBP16_MMR6
    printUImm<4>(MI, 0, O);
    return;
    break;
  case 6:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printUImm<5>(MI, 2, O);
    O << ", ";
    break;
  case 7:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O);
    break;
  case 8:
    // Jal16, JalB16
    printUImm<26>(MI, 0, O);
    break;
  case 9:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, MOVEP_MM, SWM16_MM, SWM16_MMR6...
    printRegisterList(MI, 0, O);
    O << ", ";
    break;
  case 10:
    // LWP_MM, LWP_MMR6, SWP_MM, SWP_MMR6
    printRegisterPair(MI, 0, O);
    O << ", ";
    printMemOperand(MI, 2, O);
    return;
    break;
  case 11:
    // SDBBP, SDBBP_MMR6, SDBBP_R6, SYSCALL
    printUImm<20>(MI, 0, O);
    return;
    break;
  case 12:
    // SYNC, SYNC_MM, SYNC_MMR6
    printUImm<5>(MI, 0, O);
    return;
    break;
  case 13:
    // SYNCI, SYNCI_MM, SYNCI_MMR6
    printMemOperand(MI, 0, O);
    return;
    break;
  case 14:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O);
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    O << ", ";
    break;
  case 1:
    // ADDIUS5_MM, DLSA_MM64R6, MOVEP_MM, MultRxRyRz16, MultuRxRyRz16, SltCCR...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, B16_MM, BAL, BALC, BALC_MMR6, BC, BC16_MMR6...
    return;
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, OR16_MM, OR16_MMR6, PREFX_MM, XOR16_MM...
    printOperand(MI, 1, O);
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst";
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst";
    return;
    break;
  case 7:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printMemOperand(MI, 0, O);
    return;
    break;
  case 8:
    // CTC1, CTC1_MM, CTC2_MM, DAHI_MM64R6, DATI_MM64R6, DMTC0, DMTC0_MM64R6,...
    printOperand(MI, 0, O);
    break;
  case 9:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 11:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '[';
    break;
  case 12:
    // Jal16
    O << "\n\tnop";
    return;
    break;
  case 13:
    // JalB16
    O << "\t# branch\n\tnop";
    return;
    break;
  case 14:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, SWM16_MM, SWM16_MMR6, SWM32_MM...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 15:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t";
    printOperand(MI, 1, O);
    O << "\n2:";
    return;
    break;
  case 16:
    // SC, SC64, SC64_R6, SCD, SCD_R6, SCE, SCE_MM, SC_MM, SC_R6
    printMemOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 23) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDIUS5_MM, AND16_MM, AND16_MMR6, CTC1, CTC1_MM, CTC2_MM, DMTC1, DMTC1...
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O);
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O);
    return;
    break;
  case 4:
    // BBIT0, BBIT032, BBIT1, BBIT132
    printUImm<5>(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BREAK, BREAK_MM, BREAK_MMR6, RDDSP, REPL_PH, REPL_PH_MM, WRDSP
    printUImm<10>(MI, 1, O);
    return;
    break;
  case 6:
    // DAHI_MM64R6, DATI_MM64R6, DLSA_MM64R6, DMTC0, DMTC0_MM64R6, DMTC2, LSA...
    O << ", ";
    break;
  case 7:
    // DMFC2_OCTEON, DMTC2_OCTEON, LUI_MMR6, LUi, LUi64, LUi_MM
    printUImm<16>(MI, 1, O);
    return;
    break;
  case 8:
    // INSERT_B
    printUImm<4>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // INSERT_D
    printUImm<1>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // INSERT_H
    printUImm<3>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // INSERT_W
    printUImm<2>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 12:
    // INSVE_B
    printUImm<4>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 13:
    // INSVE_D
    printUImm<1>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 14:
    // INSVE_H
    printUImm<3>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 15:
    // INSVE_W
    printUImm<2>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 16:
    // LB, LB64, LBE, LBE_MM, LBE_MMR6, LBU16_MM, LBUE_MMR6, LBU_MMR6, LB_MM,...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 17:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t";
    printOperand(MI, 0, O);
    return;
    break;
  case 18:
    // PREFX_MM
    O << '(';
    printOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 19:
    // RDDSP_MM, WRDSP_MM
    printUImm<7>(MI, 1, O);
    return;
    break;
  case 20:
    // REPL_QB, REPL_QB_MM
    printUImm<8>(MI, 1, O);
    return;
    break;
  case 21:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O);
    break;
  case 22:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t";
    printOperand(MI, 0, O);
    O << ", $t8";
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 28) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    O << ", ";
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst";
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst";
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << '[';
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst";
    return;
    break;
  case 8:
    // DAHI_MM64R6, DATI_MM64R6
    printUImm<16>(MI, 2, O);
    return;
    break;
  case 9:
    // DLSA_MM64R6, LSA_MMR6
    printOperand(MI, 0, O);
    O << ", ";
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 10:
    // DMTC0, DMTC0_MM64R6, DMTC2, MTC0, MTC0_MMR6, MTC2, MTHC0_MMR6
    printUImm<3>(MI, 2, O);
    return;
    break;
  case 11:
    // DSLL64_32
    O << ", 32";
    return;
    break;
  case 12:
    // GotPrologue16
    O << "\n\taddiu\t";
    printOperand(MI, 1, O);
    O << ", $pc, ";
    printOperand(MI, 3, O);
    O << "\n ";
    return;
    break;
  case 13:
    // LBUX, LBUX_MM, LDXC1, LDXC164, LHX, LHX_MM, LUXC1, LUXC164, LUXC1_MM, ...
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 14:
    // MOVEP_MM
    printOperand(MI, 3, O);
    return;
    break;
  case 15:
    // SLL64_32, SLL64_64
    O << ", 0";
    return;
    break;
  case 16:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 33) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, APPEND, APPEND_MMR2, BCLRI_W, BNEG...
    printUImm<5>(MI, 2, O);
    break;
  case 2:
    // ANDI_B, NORI_B, ORI_B, SHF_B, SHF_H, SHF_W, XORI_B
    printUImm<8>(MI, 2, O);
    return;
    break;
  case 3:
    // ANDI_MMR6, ANDi, ANDi64, ANDi_MM, AUI, AUI_MMR6, DAHI, DATI, DAUI, DAU...
    printUImm<16>(MI, 2, O);
    return;
    break;
  case 4:
    // BALIGN, BALIGN_MMR2, COPY_S_W, COPY_U_W, SPLATI_W
    printUImm<2>(MI, 2, O);
    break;
  case 5:
    // BCLRI_B, BNEGI_B, BSETI_B, COPY_S_H, COPY_U_H, DMFC0, DMFC0_MM64R6, DM...
    printUImm<3>(MI, 2, O);
    break;
  case 6:
    // BCLRI_D, BNEGI_D, BSETI_D, DINS, DROTR, DROTR_MM64R6, DSLL, DSLL_MM64R...
    printUImm<6>(MI, 2, O);
    break;
  case 7:
    // BCLRI_H, BNEGI_H, BSETI_H, COPY_S_B, COPY_U_B, SAT_S_H, SAT_U_H, SHLL_...
    printUImm<4>(MI, 2, O);
    break;
  case 8:
    // BINSLI_B, BINSRI_B, SLDI_H
    printUImm<3>(MI, 3, O);
    break;
  case 9:
    // BINSLI_D, BINSRI_D
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 10:
    // BINSLI_H, BINSRI_H, SLDI_B
    printUImm<4>(MI, 3, O);
    break;
  case 11:
    // BINSLI_W, BINSRI_W
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 12:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O);
    break;
  case 13:
    // BMNZI_B, BMZI_B, BSELI_B
    printUImm<8>(MI, 3, O);
    return;
    break;
  case 14:
    // COPY_S_D, SPLATI_D
    printUImm<1>(MI, 2, O);
    O << ']';
    return;
    break;
  case 15:
    // DEXTU, DEXTU_MM64R6, DINSU, DINSU_MM64R6
    printUImm<5, 32>(MI, 2, O);
    O << ", ";
    break;
  case 16:
    // FADD_D_MMR6, FADD_S_MMR6, FDIV_D_MMR6, FDIV_S_MMR6, FMUL_D_MMR6, FMUL_...
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // SLDI_D
    printUImm<1>(MI, 3, O);
    O << ']';
    return;
    break;
  case 18:
    // SLDI_W
    printUImm<2>(MI, 3, O);
    O << ']';
    return;
    break;
  case 19:
    // TEQ, TGE, TGEU, TLT, TLTU, TNE
    printUImm<10>(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, DALIGN, DALIGN_MM64R6, DEXT, DEXTM, D...
    O << ", ";
    break;
  case 2:
    // COPY_S_B, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, SLDI_B, SL...
    O << ']';
    return;
    break;
  case 3:
    // DEXTU, DEXTU_MM64R6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DINSU, DINSU_MM64R6
    printUImm<6>(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ALIGN, ALIGN_MMR6
    printUImm<2>(MI, 3, O);
    return;
    break;
  case 1:
    // CINS, CINS32, EXTS, EXTS32
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 2:
    // DALIGN, DALIGN_MM64R6
    printUImm<3>(MI, 3, O);
    return;
    break;
  case 3:
    // DEXT, DEXT_MM64R6, EXT, EXT_MM, EXT_MMR6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DEXTM, DEXTM_MM64R6
    printUImm<5, 33>(MI, 3, O);
    return;
    break;
  case 5:
    // DINS, DINSM, DINS_MM64R6, INS, INS_MM, INS_MMR6
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 6:
    // DINSM_MM64R6
    printUImm<6, 2>(MI, 3, O);
    return;
    break;
  case 7:
    // DLSA, DLSA_R6, LSA, LSA_R6
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 8:
    // MADD_D32, MADD_D32_MM, MADD_D64, MADD_S, MADD_S_MM, MSUB_D32, MSUB_D32...
    printOperand(MI, 3, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1F_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F_MM FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BC1T_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T_MM FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\xFF\x01\x01";
      break;
    }
    return false;
  case Mips::C_EQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MM ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MMR6 ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dneg $\x01";
      break;
    }
    return false;
  case Mips::DSUBU_MM64R6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBU_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUBU_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dnegu $\x01";
      break;
    }
    return false;
  case Mips::DSUB_MM64R6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUB_MM64R6 GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dneg $\x01";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dnegu $\x01";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALRC_HB_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_HB_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc.hb $\x02";
      break;
    }
    return false;
  case Mips::JALRC_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::JIALC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC GPR32Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIALC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC64 GPR64Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC GPR32Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::JIC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC64 GPR64Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR_MMR6 GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_MMR6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "neg $\x01";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "negu $\x01";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYNC_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC_MMR6 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::SYSCALL_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL_MM 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TEQ_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  case Mips::WRDSP:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::WRDSP_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP_MM GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printUImm<10>(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
